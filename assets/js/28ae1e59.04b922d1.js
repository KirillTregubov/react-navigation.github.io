"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[26277],{58961:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var t=r(85893),a=r(11151),o=r(74866),i=r(85162);const s={id:"drawer-actions",title:"DrawerActions reference",sidebar_label:"DrawerActions"},c=void 0,l={id:"drawer-actions",title:"DrawerActions reference",description:"DrawerActions is an object containing methods for generating actions specific to drawer-based navigators. Its methods expand upon the actions available in CommonActions.",source:"@site/versioned_docs/version-7.x/drawer-actions.md",sourceDirName:".",slug:"/drawer-actions",permalink:"/docs/7.x/drawer-actions",draft:!1,unlisted:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/drawer-actions.md",tags:[],version:"7.x",frontMatter:{id:"drawer-actions",title:"DrawerActions reference",sidebar_label:"DrawerActions"},sidebar:"docs",previous:{title:"StackActions",permalink:"/docs/7.x/stack-actions"},next:{title:"TabActions",permalink:"/docs/7.x/tab-actions"}},u={},p=[{value:"openDrawer",id:"opendrawer",level:3},{value:"closeDrawer",id:"closedrawer",level:3},{value:"toggleDrawer",id:"toggledrawer",level:3},{value:"jumpTo",id:"jumpto",level:3}];function w(n){const e={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"DrawerActions"})," is an object containing methods for generating actions specific to drawer-based navigators. Its methods expand upon the actions available in ",(0,t.jsx)(e.a,{href:"/docs/7.x/navigation-actions",children:"CommonActions"}),"."]}),"\n",(0,t.jsx)(e.p,{children:"The following actions are supported:"}),"\n",(0,t.jsx)(e.h3,{id:"opendrawer",children:"openDrawer"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"openDrawer"})," action can be used to open the drawer pane."]}),"\n",(0,t.jsxs)(o.Z,{groupId:"config",queryString:"config",children:[(0,t.jsx)(i.Z,{value:"static",label:"Static",default:!0,children:(0,t.jsx)(e.pre,{"data-name":"Drawer Actions - openDrawer","data-snack":"true",children:(0,t.jsx)(e.code,{className:"language-js",metastring:'name="Drawer Actions - openDrawer" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  DrawerActions,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(DrawerActions.openDrawer());\n          // codeblock-focus-end\n        }}\n      >\n        Open Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\n        Toggle Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(jumpToAction)}>\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,t.jsx)(i.Z,{value:"dynamic",label:"Dynamic",children:(0,t.jsx)(e.pre,{"data-name":"Drawer Actions - openDrawer","data-snack":"true",children:(0,t.jsx)(e.code,{className:"language-js",metastring:'name="Drawer Actions - openDrawer" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  NavigationContainer,\n  DrawerActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(DrawerActions.openDrawer());\n          // codeblock-focus-end\n        }}\n      >\n        Open Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\n        Toggle Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(jumpToAction)}>\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Drawer.Navigator\n        drawerContent={(props) => <CustomDrawerContent {...props} />}\n      >\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\n        <Drawer.Screen name=\"Profile\" component={ProfileScreen} />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,t.jsx)(e.h3,{id:"closedrawer",children:"closeDrawer"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"closeDrawer"})," action can be used to close the drawer pane."]}),"\n",(0,t.jsxs)(o.Z,{groupId:"config",queryString:"config",children:[(0,t.jsx)(i.Z,{value:"static",label:"Static",default:!0,children:(0,t.jsx)(e.pre,{"data-name":"Drawer Actions - closeDrawer","data-snack":"true",children:(0,t.jsx)(e.code,{className:"language-js",metastring:'name="Drawer Actions - closeDrawer" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  DrawerActions,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\n        Toggle Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(jumpToAction)}>\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent({ navigation }) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(DrawerActions.closeDrawer());\n          // codeblock-focus-end\n        }}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,t.jsx)(i.Z,{value:"dynamic",label:"Dynamic",children:(0,t.jsx)(e.pre,{"data-name":"Drawer Actions - closeDrawer","data-snack":"true",children:(0,t.jsx)(e.code,{className:"language-js",metastring:'name="Drawer Actions - closeDrawer" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  NavigationContainer,\n  DrawerActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\n        Toggle Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(jumpToAction)}>\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent({ navigation }) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(DrawerActions.closeDrawer());\n          // codeblock-focus-end\n        }}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Drawer.Navigator\n        drawerContent={(props) => <CustomDrawerContent {...props} />}\n      >\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\n        <Drawer.Screen name=\"Profile\" component={ProfileScreen} />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,t.jsx)(e.h3,{id:"toggledrawer",children:"toggleDrawer"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"toggleDrawer"})," action can be used to open the drawer pane if closed, or close if open."]}),"\n",(0,t.jsxs)(o.Z,{groupId:"config",queryString:"config",children:[(0,t.jsx)(i.Z,{value:"static",label:"Static",default:!0,children:(0,t.jsx)(e.pre,{"data-name":"Drawer Actions - toggleDrawer","data-snack":"true",children:(0,t.jsx)(e.code,{className:"language-js",metastring:'name="Drawer Actions - toggleDrawer" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  DrawerActions,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open Drawer\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(DrawerActions.toggleDrawer());\n          // codeblock-focus-end\n        }}\n      >\n        Toggle Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(jumpToAction)}>\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,t.jsx)(i.Z,{value:"dynamic",label:"Dynamic",children:(0,t.jsx)(e.pre,{"data-name":"Drawer Actions - toggleDrawer","data-snack":"true",children:(0,t.jsx)(e.code,{className:"language-js",metastring:'name="Drawer Actions - toggleDrawer" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  NavigationContainer,\n  DrawerActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\n\nfunction HomeScreen({ navigation }) {\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open Drawer\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(DrawerActions.toggleDrawer());\n          // codeblock-focus-end\n        }}\n      >\n        Toggle Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(jumpToAction)}>\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Drawer.Navigator\n        drawerContent={(props) => <CustomDrawerContent {...props} />}\n      >\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\n        <Drawer.Screen name=\"Profile\" component={ProfileScreen} />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,t.jsx)(e.h3,{id:"jumpto",children:"jumpTo"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"jumpTo"})," action can be used to jump to an existing route in the drawer navigator."]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"name"})," - ",(0,t.jsx)(e.em,{children:"string"})," - Name of the route to jump to."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"params"})," - ",(0,t.jsx)(e.em,{children:"object"})," - Screen params to pass to the destination route."]}),"\n"]}),"\n",(0,t.jsxs)(o.Z,{groupId:"config",queryString:"config",children:[(0,t.jsx)(i.Z,{value:"static",label:"Static",default:!0,children:(0,t.jsx)(e.pre,{"data-name":"Drawer Actions - jumpTo","data-snack":"true",children:(0,t.jsx)(e.code,{className:"language-js",metastring:'name="Drawer Actions - jumpTo" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  DrawerActions,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\n        Toggle Drawer\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(jumpToAction);\n          // codeblock-focus-end\n        }}\n      >\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Home: HomeScreen,\n    Profile: ProfileScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,t.jsx)(i.Z,{value:"dynamic",label:"Dynamic",children:(0,t.jsx)(e.pre,{"data-name":"Drawer Actions - jumpTo","data-snack":"true",children:(0,t.jsx)(e.code,{className:"language-js",metastring:'name="Drawer Actions - jumpTo" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from '@react-navigation/elements';\nimport {\n  NavigationContainer,\n  DrawerActions,\n  useNavigation,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\n\nfunction HomeScreen({ navigation }) {\n  const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Home!</Text>\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open Drawer\n      </Button>\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\n        Toggle Drawer\n      </Button>\n      <Button\n        onPress={() => {\n          // codeblock-focus-start\n          navigation.dispatch(jumpToAction);\n          // codeblock-focus-end\n        }}\n      >\n        Jump to Profile\n      </Button>\n    </View>\n  );\n}\n\nfunction ProfileScreen({ route }) {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Profile!</Text>\n      <Text>{route?.params?.user ? route.params.user : 'Noone'}'s profile</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Drawer.Navigator\n        drawerContent={(props) => <CustomDrawerContent {...props} />}\n      >\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\n        <Drawer.Screen name=\"Profile\" component={ProfileScreen} />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n"})})})]})]})}function m(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(w,{...n})}):w(n)}},85162:(n,e,r)=>{r.d(e,{Z:()=>i});r(67294);var t=r(86010);const a={tabItem:"tabItem_Ymn6"};var o=r(85893);function i(n){let{children:e,hidden:r,className:i}=n;return(0,o.jsx)("div",{role:"tabpanel",className:(0,t.Z)(a.tabItem,i),hidden:r,children:e})}},74866:(n,e,r)=>{r.d(e,{Z:()=>b});var t=r(67294),a=r(86010),o=r(12466),i=r(16550),s=r(20469),c=r(91980),l=r(67392),u=r(50012);function p(n){var e,r;return null!=(e=null==(r=t.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,t.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:r.filter(Boolean))?e:[]}function w(n){const{values:e,children:r}=n;return(0,t.useMemo)((()=>{const n=null!=e?e:function(n){return p(n).map((n=>{let{props:{value:e,label:r,attributes:t,default:a}}=n;return{value:e,label:r,attributes:t,default:a}}))}(r);return function(n){const e=(0,l.l)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error('Docusaurus error: Duplicate values "'+e.map((n=>n.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(n),n}),[e,r])}function m(n){let{value:e,tabValues:r}=n;return r.some((n=>n.value===e))}function d(n){let{queryString:e=!1,groupId:r}=n;const a=(0,i.k6)(),o=function(n){let{queryString:e=!1,groupId:r}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:e,groupId:r});return[(0,c._X)(o),(0,t.useCallback)((n=>{if(!o)return;const e=new URLSearchParams(a.location.search);e.set(o,n),a.replace({...a.location,search:e.toString()})}),[o,a])]}function g(n){const{defaultValue:e,queryString:r=!1,groupId:a}=n,o=w(n),[i,c]=(0,t.useState)((()=>function(n){var e;let{defaultValue:r,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!m({value:r,tabValues:t}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+r+'" but none of its children has the corresponding value. Available values are: '+t.map((n=>n.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return r}const a=null!=(e=t.find((n=>n.default)))?e:t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:o}))),[l,p]=d({queryString:r,groupId:a}),[g,f]=function(n){let{groupId:e}=n;const r=function(n){return n?"docusaurus.tab."+n:null}(e),[a,o]=(0,u.Nk)(r);return[a,(0,t.useCallback)((n=>{r&&o.set(n)}),[r,o])]}({groupId:a}),D=(()=>{const n=null!=l?l:g;return m({value:n,tabValues:o})?n:null})();(0,s.Z)((()=>{D&&c(D)}),[D]);return{selectedValue:i,selectValue:(0,t.useCallback)((n=>{if(!m({value:n,tabValues:o}))throw new Error("Can't select invalid tab value="+n);c(n),p(n),f(n)}),[p,f,o]),tabValues:o}}var f=r(72389);const D={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=r(85893);function h(n){let{className:e,block:r,selectedValue:t,selectValue:i,tabValues:s}=n;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.o5)(),u=n=>{const e=n.currentTarget,r=c.indexOf(e),a=s[r].value;a!==t&&(l(e),i(a))},p=n=>{var e;let r=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{var t;const e=c.indexOf(n.currentTarget)+1;r=null!=(t=c[e])?t:c[0];break}case"ArrowLeft":{var a;const e=c.indexOf(n.currentTarget)-1;r=null!=(a=c[e])?a:c[c.length-1];break}}null==(e=r)||e.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":r},e),children:s.map((n=>{let{value:e,label:r,attributes:o}=n;return(0,v.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:n=>c.push(n),onKeyDown:p,onClick:u,...o,className:(0,a.Z)("tabs__item",D.tabItem,null==o?void 0:o.className,{"tabs__item--active":t===e}),children:null!=r?r:e},e)}))})}function x(n){let{lazy:e,children:r,selectedValue:a}=n;const o=(Array.isArray(r)?r:[r]).filter(Boolean);if(e){const n=o.find((n=>n.props.value===a));return n?(0,t.cloneElement)(n,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:o.map(((n,e)=>(0,t.cloneElement)(n,{key:e,hidden:n.props.value!==a})))})}function j(n){const e=g(n);return(0,v.jsxs)("div",{className:(0,a.Z)("tabs-container",D.tabList),children:[(0,v.jsx)(h,{...n,...e}),(0,v.jsx)(x,{...n,...e})]})}function b(n){const e=(0,f.Z)();return(0,v.jsx)(j,{...n,children:p(n.children)},String(e))}},11151:(n,e,r)=>{r.d(e,{Z:()=>s,a:()=>i});var t=r(67294);const a={},o=t.createContext(a);function i(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);