"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[92715],{51246:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>c,default:()=>w,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=t(85893),a=t(11151),o=t(74866),i=t(85162);const s={id:"drawer-based-navigation",title:"Drawer navigation",sidebar_label:"Drawer navigation"},c=void 0,l={id:"drawer-based-navigation",title:"Drawer navigation",description:"Common pattern in navigation is to use drawer from left (sometimes right) side for navigating between screens.",source:"@site/versioned_docs/version-7.x/drawer-based-navigation.md",sourceDirName:".",slug:"/drawer-based-navigation",permalink:"/docs/7.x/drawer-based-navigation",draft:!1,unlisted:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/drawer-based-navigation.md",tags:[],version:"7.x",frontMatter:{id:"drawer-based-navigation",title:"Drawer navigation",sidebar_label:"Drawer navigation"}},u={},d=[{value:"Minimal example of drawer-based navigation",id:"minimal-example-of-drawer-based-navigation",level:2},{value:"Opening and closing drawer",id:"opening-and-closing-drawer",level:2}];function g(n){const e={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"Common pattern in navigation is to use drawer from left (sometimes right) side for navigating between screens."}),"\n",(0,r.jsx)("video",{playsInline:!0,autoPlay:!0,muted:!0,loop:!0,children:(0,r.jsx)("source",{src:"/assets/navigators/drawer/drawer.mp4"})}),"\n",(0,r.jsxs)(e.p,{children:["Before continuing, first install and configure ",(0,r.jsx)(e.a,{href:"https://github.com/react-navigation/react-navigation/tree/main/packages/drawer",children:(0,r.jsx)(e.code,{children:"@react-navigation/drawer"})})," and its dependencies following the ",(0,r.jsx)(e.a,{href:"/docs/7.x/drawer-navigator#installation",children:"installation instructions"}),"."]}),"\n",(0,r.jsx)(e.h2,{id:"minimal-example-of-drawer-based-navigation",children:"Minimal example of drawer-based navigation"}),"\n",(0,r.jsxs)(e.p,{children:["To use this drawer navigator, import it from ",(0,r.jsx)(e.code,{children:"@react-navigation/drawer"}),":\n(swipe right to open)"]}),"\n",(0,r.jsxs)(o.Z,{groupId:"config",queryString:"config",children:[(0,r.jsx)(i.Z,{value:"static",label:"Static",default:!0,children:(0,r.jsx)(e.pre,{"data-name":"Drawer navigation","data-snack":"true",children:(0,r.jsx)(e.code,{className:"language-js",metastring:'name="Drawer navigation" snack',children:"import * as React from 'react';\nimport { View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport {\n  createStaticNavigation,\n  useNavigation,\n} from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('Notifications')}>\n        Go to notifications\n      </Button>\n    </View>\n  );\n}\n\nfunction NotificationsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.goBack()}>Go back home</Button>\n    </View>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  screens: {\n    Home: HomeScreen,\n    Notifications: NotificationsScreen,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,r.jsx)(i.Z,{value:"dynamic",label:"Dynamic",children:(0,r.jsx)(e.pre,{"data-name":"Drawer navigation","data-snack":"true",children:(0,r.jsx)(e.code,{className:"language-js",metastring:'name="Drawer navigation" snack',children:"import * as React from 'react';\nimport { View } from 'react-native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport { Button } from '@react-navigation/elements';\n\nfunction HomeScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.navigate('Notifications')}>\n        Go to notifications\n      </Button>\n    </View>\n  );\n}\n\nfunction NotificationsScreen() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button onPress={() => navigation.goBack()}>Go back home</Button>\n    </View>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Drawer.Navigator initialRouteName=\"Home\">\n        <Drawer.Screen name=\"Home\" component={HomeScreen} />\n        <Drawer.Screen name=\"Notifications\" component={NotificationsScreen} />\n      </Drawer.Navigator>\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,r.jsx)(e.h2,{id:"opening-and-closing-drawer",children:"Opening and closing drawer"}),"\n",(0,r.jsx)(e.p,{children:"To open and close drawer, use the following helpers:"}),"\n",(0,r.jsxs)(o.Z,{groupId:"config",queryString:"config",children:[(0,r.jsx)(i.Z,{value:"static",label:"Static",default:!0,children:(0,r.jsx)(e.pre,{"data-name":"Drawer open and close","data-snack":"true",children:(0,r.jsx)(e.code,{className:"language-js",metastring:'name="Drawer open and close" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n      // codeblock-focus-end\n      <Button onPress={() => navigation.toggleDrawer()}>Toggle drawer</Button>\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\n\n/* content */\n\n// codeblock-focus-end\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      // codeblock-focus-start\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.closeDrawer()}\n      />\n      // codeblock-focus-end\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.toggleDrawer()}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Feed: Feed,\n    Notifications: Notifications,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,r.jsx)(i.Z,{value:"dynamic",label:"Dynamic",children:(0,r.jsx)(e.pre,{"data-name":"Drawer open and close","data-snack":"true",children:(0,r.jsx)(e.code,{className:"language-js",metastring:'name="Drawer open and close" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n      // codeblock-focus-end\n      <Button onPress={() => navigation.toggleDrawer()}>Toggle drawer</Button>\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\n\n/* content */\n\n// codeblock-focus-end\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      // codeblock-focus-start\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.closeDrawer()}\n      />\n      // codeblock-focus-end\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.toggleDrawer()}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  return (\n    <Drawer.Navigator\n      useLegacyImplementation\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\n    >\n      <Drawer.Screen name=\"Feed\" component={Feed} />\n      <Drawer.Screen name=\"Notifications\" component={Notifications} />\n    </Drawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyDrawer />\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,r.jsx)(e.p,{children:"If you would like to toggle the drawer you call the following:"}),"\n",(0,r.jsxs)(o.Z,{groupId:"config",queryString:"config",children:[(0,r.jsx)(i.Z,{value:"static",label:"Static",default:!0,children:(0,r.jsx)(e.pre,{"data-name":"Drawer toggle","data-snack":"true",children:(0,r.jsx)(e.code,{className:"language-js",metastring:'name="Drawer toggle" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  useNavigation,\n  createStaticNavigation,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.toggleDrawer()}>Toggle drawer</Button>\n      // codeblock-focus-end\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.closeDrawer()}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.toggleDrawer()}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Feed: Feed,\n    Notifications: Notifications,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,r.jsx)(i.Z,{value:"dynamic",label:"Dynamic",children:(0,r.jsx)(e.pre,{"data-name":"Drawer toggle","data-snack":"true",children:(0,r.jsx)(e.code,{className:"language-js",metastring:'name="Drawer toggle" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { NavigationContainer, useNavigation } from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      <Button onPress={() => navigation.openDrawer()}>Open drawer</Button>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.toggleDrawer()}>Toggle drawer</Button>\n      // codeblock-focus-end\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.closeDrawer()}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.toggleDrawer()}\n      />\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  return (\n    <Drawer.Navigator\n      useLegacyImplementation\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\n    >\n      <Drawer.Screen name=\"Feed\" component={Feed} />\n      <Drawer.Screen name=\"Notifications\" component={Notifications} />\n    </Drawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyDrawer />\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,r.jsx)(e.p,{children:"Each of these functions, behind the scenes, are simply dispatching actions:"}),"\n",(0,r.jsxs)(o.Z,{groupId:"config",queryString:"config",children:[(0,r.jsx)(i.Z,{value:"static",label:"Static",default:!0,children:(0,r.jsx)(e.pre,{"data-name":"Navigation dispatcher","data-snack":"true",children:(0,r.jsx)(e.code,{className:"language-js",metastring:'name="Navigation dispatcher" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  createStaticNavigation,\n  useNavigation,\n  DrawerActions,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open drawer\n      </Button>\n      // codeblock-focus-end\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\n        Toggle drawer\n      </Button>\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\n\n/* content */\n\n// codeblock-focus-end\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      // codeblock-focus-start\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n      // codeblock-focus-end\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator({\n  drawerContent: (props) => <CustomDrawerContent {...props} />,\n  screens: {\n    Feed: Feed,\n    Notifications: Notifications,\n  },\n});\n\nconst Navigation = createStaticNavigation(Drawer);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,r.jsx)(i.Z,{value:"dynamic",label:"Dynamic",children:(0,r.jsx)(e.pre,{"data-name":"Navigation dispatcher","data-snack":"true",children:(0,r.jsx)(e.code,{className:"language-js",metastring:'name="Navigation dispatcher" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  NavigationContainer,\n  useNavigation,\n  DrawerActions,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n  DrawerItem,\n} from '@react-navigation/drawer';\nimport { Button } from '@react-navigation/elements';\n\nfunction Feed() {\n  const navigation = useNavigation();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Feed Screen</Text>\n      // codeblock-focus-start\n      <Button onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n        Open drawer\n      </Button>\n      // codeblock-focus-end\n      <Button onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}>\n        Toggle drawer\n      </Button>\n    </View>\n  );\n}\n\nfunction Notifications() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notifications Screen</Text>\n    </View>\n  );\n}\n// codeblock-focus-start\n\n/* content */\n\n// codeblock-focus-end\n\nfunction CustomDrawerContent(props) {\n  return (\n    <DrawerContentScrollView {...props}>\n      <DrawerItemList {...props} />\n      // codeblock-focus-start\n      <DrawerItem\n        label=\"Close drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.closeDrawer())}\n      />\n      <DrawerItem\n        label=\"Toggle drawer\"\n        onPress={() => props.navigation.dispatch(DrawerActions.toggleDrawer())}\n      />\n      // codeblock-focus-end\n    </DrawerContentScrollView>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\n\nfunction MyDrawer() {\n  return (\n    <Drawer.Navigator\n      useLegacyImplementation\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\n    >\n      <Drawer.Screen name=\"Feed\" component={Feed} />\n      <Drawer.Screen name=\"Notifications\" component={Notifications} />\n    </Drawer.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <MyDrawer />\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,r.jsx)(e.p,{children:"If you would like to determine if drawer is open or closed, you can do the following:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",metastring:'name="Drawer hook"',children:"import { useDrawerStatus } from '@react-navigation/drawer';\n\n// ...\n\nconst isDrawerOpen = useDrawerStatus() === 'open';\n"})})]})}function w(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(g,{...n})}):g(n)}},85162:(n,e,t)=>{t.d(e,{Z:()=>i});t(67294);var r=t(86010);const a={tabItem:"tabItem_Ymn6"};var o=t(85893);function i(n){let{children:e,hidden:t,className:i}=n;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,i),hidden:t,children:e})}},74866:(n,e,t)=>{t.d(e,{Z:()=>N});var r=t(67294),a=t(86010),o=t(12466),i=t(16550),s=t(20469),c=t(91980),l=t(67392),u=t(50012);function d(n){var e,t;return null!=(e=null==(t=r.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,r.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?e:[]}function g(n){const{values:e,children:t}=n;return(0,r.useMemo)((()=>{const n=null!=e?e:function(n){return d(n).map((n=>{let{props:{value:e,label:t,attributes:r,default:a}}=n;return{value:e,label:t,attributes:r,default:a}}))}(t);return function(n){const e=(0,l.l)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error('Docusaurus error: Duplicate values "'+e.map((n=>n.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(n),n}),[e,t])}function w(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function m(n){let{queryString:e=!1,groupId:t}=n;const a=(0,i.k6)(),o=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:e,groupId:t});return[(0,c._X)(o),(0,r.useCallback)((n=>{if(!o)return;const e=new URLSearchParams(a.location.search);e.set(o,n),a.replace({...a.location,search:e.toString()})}),[o,a])]}function p(n){const{defaultValue:e,queryString:t=!1,groupId:a}=n,o=g(n),[i,c]=(0,r.useState)((()=>function(n){var e;let{defaultValue:t,tabValues:r}=n;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!w({value:t,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+r.map((n=>n.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}const a=null!=(e=r.find((n=>n.default)))?e:r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:o}))),[l,d]=m({queryString:t,groupId:a}),[p,f]=function(n){let{groupId:e}=n;const t=function(n){return n?"docusaurus.tab."+n:null}(e),[a,o]=(0,u.Nk)(t);return[a,(0,r.useCallback)((n=>{t&&o.set(n)}),[t,o])]}({groupId:a}),v=(()=>{const n=null!=l?l:p;return w({value:n,tabValues:o})?n:null})();(0,s.Z)((()=>{v&&c(v)}),[v]);return{selectedValue:i,selectValue:(0,r.useCallback)((n=>{if(!w({value:n,tabValues:o}))throw new Error("Can't select invalid tab value="+n);c(n),d(n),f(n)}),[d,f,o]),tabValues:o}}var f=t(72389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var D=t(85893);function h(n){let{className:e,block:t,selectedValue:r,selectValue:i,tabValues:s}=n;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.o5)(),u=n=>{const e=n.currentTarget,t=c.indexOf(e),a=s[t].value;a!==r&&(l(e),i(a))},d=n=>{var e;let t=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{var r;const e=c.indexOf(n.currentTarget)+1;t=null!=(r=c[e])?r:c[0];break}case"ArrowLeft":{var a;const e=c.indexOf(n.currentTarget)-1;t=null!=(a=c[e])?a:c[c.length-1];break}}null==(e=t)||e.focus()};return(0,D.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},e),children:s.map((n=>{let{value:e,label:t,attributes:o}=n;return(0,D.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:n=>c.push(n),onKeyDown:d,onClick:u,...o,className:(0,a.Z)("tabs__item",v.tabItem,null==o?void 0:o.className,{"tabs__item--active":r===e}),children:null!=t?t:e},e)}))})}function b(n){let{lazy:e,children:t,selectedValue:a}=n;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=o.find((n=>n.props.value===a));return n?(0,r.cloneElement)(n,{className:"margin-top--md"}):null}return(0,D.jsx)("div",{className:"margin-top--md",children:o.map(((n,e)=>(0,r.cloneElement)(n,{key:e,hidden:n.props.value!==a})))})}function x(n){const e=p(n);return(0,D.jsxs)("div",{className:(0,a.Z)("tabs-container",v.tabList),children:[(0,D.jsx)(h,{...n,...e}),(0,D.jsx)(b,{...n,...e})]})}function N(n){const e=(0,f.Z)();return(0,D.jsx)(x,{...n,children:d(n.children)},String(e))}},11151:(n,e,t)=>{t.d(e,{Z:()=>s,a:()=>i});var r=t(67294);const a={},o=r.createContext(a);function i(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);