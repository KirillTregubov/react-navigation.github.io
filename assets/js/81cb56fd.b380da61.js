"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["11905"],{5091:function(e,t,n){n.r(t),n.d(t,{metadata:()=>i,contentTitle:()=>c,default:()=>m,assets:()=>u,toc:()=>d,frontMatter:()=>l});var i=JSON.parse('{"id":"testing","title":"Testing with Jest","description":"Testing code using React Navigation may require some setup since we need to mock native dependencies used in the navigators. We recommend using Jest to write unit tests.","source":"@site/versioned_docs/version-7.x/testing.md","sourceDirName":".","slug":"/testing","permalink":"/docs/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/testing.md","tags":[],"version":"7.x","frontMatter":{"id":"testing","title":"Testing with Jest","sidebar_label":"Testing with Jest"},"sidebar":"docs","previous":{"title":"Static and dynamic APIs","permalink":"/docs/combine-static-with-dynamic"},"next":{"title":"Configuring TypeScript","permalink":"/docs/typescript"}}'),r=n("85893"),a=n("50065"),s=n("47902"),o=n("5525");let l={id:"testing",title:"Testing with Jest",sidebar_label:"Testing with Jest"},c=void 0,u={},d=[{value:"Mocking native modules",id:"mocking-native-modules",level:2},{value:"Writing tests",id:"writing-tests",level:2},{value:"Best practices",id:"best-practices",level:2}];function h(e){let t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Testing code using React Navigation may require some setup since we need to mock native dependencies used in the navigators. We recommend using ",(0,r.jsx)(t.a,{href:"https://jestjs.io",children:"Jest"})," to write unit tests."]}),"\n",(0,r.jsx)(t.h2,{id:"mocking-native-modules",children:"Mocking native modules"}),"\n",(0,r.jsx)(t.p,{children:"To be able to test React Navigation components, certain dependencies will need to be mocked depending on which components are being used."}),"\n",(0,r.jsxs)(t.p,{children:["If you're using ",(0,r.jsx)(t.code,{children:"@react-navigation/drawer"}),", you will need to mock:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"react-native-reanimated"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"react-native-gesture-handler"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["If you're using ",(0,r.jsx)(t.code,{children:"@react-navigation/stack"}),", you will only need to mock:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"react-native-gesture-handler"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["To add the mocks, create a file ",(0,r.jsx)(t.code,{children:"jest/setup.js"})," (or any other file name of your choice) and paste the following code in it:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"// include this line for mocking react-native-gesture-handler\nimport 'react-native-gesture-handler/jestSetup';\n\n// include this section and the NativeAnimatedHelper section for mocking react-native-reanimated\njest.mock('react-native-reanimated', () => {\n  const Reanimated = require('react-native-reanimated/mock');\n\n  // The mock for `call` immediately calls the callback which is incorrect\n  // So we override it with a no-op\n  Reanimated.default.call = () => {};\n\n  return Reanimated;\n});\n\n// Silence the warning: Animated: `useNativeDriver` is not supported because the native animated module is missing\njest.mock('react-native/Libraries/Animated/NativeAnimatedHelper');\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Then we need to use this setup file in our jest config. You can add it under ",(0,r.jsx)(t.code,{children:"setupFiles"})," option in a ",(0,r.jsx)(t.code,{children:"jest.config.js"})," file or the ",(0,r.jsx)(t.code,{children:"jest"})," key in ",(0,r.jsx)(t.code,{children:"package.json"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n  "preset": "react-native",\n  "setupFiles": ["<rootDir>/jest/setup.js"]\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Make sure that the path to the file in ",(0,r.jsx)(t.code,{children:"setupFiles"})," is correct. Jest will run these files before running your tests, so it's the best place to put your global mocks."]}),"\n",(0,r.jsx)(t.p,{children:"If you're not using Jest, then you'll need to mock these modules according to the test framework you are using."}),"\n",(0,r.jsx)(t.h2,{id:"writing-tests",children:"Writing tests"}),"\n",(0,r.jsxs)(t.p,{children:["We recommend using ",(0,r.jsx)(t.a,{href:"https://callstack.github.io/react-native-testing-library/",children:"React Native Testing Library"})," along with ",(0,r.jsx)(t.a,{href:"https://github.com/testing-library/jest-native",children:(0,r.jsx)(t.code,{children:"jest-native"})})," to write your tests."]}),"\n",(0,r.jsx)(t.p,{children:"Example:"}),"\n",(0,r.jsxs)(s.Z,{groupId:"config",queryString:"config",children:[(0,r.jsx)(o.Z,{value:"static",label:"Static",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:"name='Testing with jest'",children:"import * as React from 'react';\nimport { screen, render, fireEvent } from '@testing-library/react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { RootNavigator } from './RootNavigator';\n\nconst Navigation = createStaticNavigation(RootNavigator);\n\ntest('shows profile screen when View Profile is pressed', () => {\n  render(<Navigation />);\n\n  fireEvent.press(screen.getByText('View Profile'));\n\n  expect(screen.getByText('My Profile')).toBeOnTheScreen();\n});\n"})})}),(0,r.jsx)(o.Z,{value:"dynamic",label:"Dynamic",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:"name='Testing with jest'",children:"import * as React from 'react';\nimport { screen, render, fireEvent } from '@testing-library/react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { RootNavigator } from './RootNavigator';\n\ntest('shows profile screen when View Profile is pressed', () => {\n  render(\n    <NavigationContainer>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n\n  fireEvent.press(screen.getByText('View Profile'));\n\n  expect(screen.getByText('My Profile')).toBeOnTheScreen();\n});\n"})})})]}),"\n",(0,r.jsx)(t.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,r.jsx)(t.p,{children:"There are a couple of things to keep in mind when writing tests for components using React Navigation:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Avoid mocking React Navigation. Instead, use a real navigator in your tests."}),"\n",(0,r.jsx)(t.li,{children:"Don't check for navigation actions. Instead, check for the result of the navigation such as the screen being rendered."}),"\n"]})]})}function m(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},5525:function(e,t,n){n.d(t,{Z:()=>s});var i=n("85893");n("67294");var r=n("67026");let a="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.Z)(a,s),hidden:n,children:t})}},47902:function(e,t,n){n.d(t,{Z:()=>b});var i=n("85893"),r=n("67294"),a=n("67026"),s=n("69599"),o=n("16550"),l=n("32000"),c=n("4520"),u=n("38341"),d=n("76009");function h(e){var t,n;return null!==(n=null===(t=r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof e.type?e.type:e.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))||void 0===t?void 0:t.filter(Boolean))&&void 0!==n?n:[]}function m(e){let{value:t,tabValues:n}=e;return n.some(e=>e.value===t)}var p=n("7227");let g="tabList__CuJ",v="tabItem_LNqP";function f(e){let{className:t,block:n,selectedValue:r,selectValue:o,tabValues:l}=e,c=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.o5)(),d=e=>{let t=e.currentTarget,n=l[c.indexOf(t)].value;n!==r&&(u(t),o(n))},h=e=>{var t,n;let i=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let n=c.indexOf(e.currentTarget)+1;i=null!==(t=c[n])&&void 0!==t?t:c[0];break}case"ArrowLeft":{let t=c.indexOf(e.currentTarget)-1;i=null!==(n=c[t])&&void 0!==n?n:c[c.length-1]}}null==i||i.focus()};return(0,i.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t),children:l.map(e=>{let{value:t,label:n,attributes:s}=e;return(0,i.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>c.push(e),onKeyDown:h,onClick:d,...s,className:(0,a.Z)("tabs__item",v,null==s?void 0:s.className,{"tabs__item--active":r===t}),children:null!=n?n:t},t)})})}function j(e){let{lazy:t,children:n,selectedValue:s}=e,o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){let e=o.find(e=>e.props.value===s);return e?(0,r.cloneElement)(e,{className:(0,a.Z)("margin-top--md",e.props.className)}):null}return(0,i.jsx)("div",{className:"margin-top--md",children:o.map((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==s}))})}function x(e){let t=function(e){let{defaultValue:t,queryString:n=!1,groupId:i}=e,a=function(e){let{values:t,children:n}=e;return(0,r.useMemo)(()=>{let e=null!=t?t:h(n).map(e=>{let{props:{value:t,label:n,attributes:i,default:r}}=e;return{value:t,label:n,attributes:i,default:r}});return!function(e){let t=(0,u.lx)(e,(e,t)=>e.value===t.value);if(t.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(t.map(e=>e.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'))}(e),e},[t,n])}(e),[s,p]=(0,r.useState)(()=>(function(e){var t;let{defaultValue:n,tabValues:i}=e;if(0===i.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:i}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(n,'" but none of its children has the corresponding value. Available values are: ').concat(i.map(e=>e.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return n}let r=null!==(t=i.find(e=>e.default))&&void 0!==t?t:i[0];if(!r)throw Error("Unexpected error: 0 tabValues");return r.value})({defaultValue:t,tabValues:a})),[g,v]=function(e){let{queryString:t=!1,groupId:n}=e,i=(0,o.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:t,groupId:n}),s=(0,c._X)(a);return[s,(0,r.useCallback)(e=>{if(!a)return;let t=new URLSearchParams(i.location.search);t.set(a,e),i.replace({...i.location,search:t.toString()})},[a,i])]}({queryString:n,groupId:i}),[f,j]=function(e){var t;let{groupId:n}=e;let i=(t=n)?"docusaurus.tab.".concat(t):null,[a,s]=(0,d.Nk)(i);return[a,(0,r.useCallback)(e=>{if(!!i)s.set(e)},[i,s])]}({groupId:i}),x=(()=>{let e=null!=g?g:f;return m({value:e,tabValues:a})?e:null})();return(0,l.Z)(()=>{x&&p(x)},[x]),{selectedValue:s,selectValue:(0,r.useCallback)(e=>{if(!m({value:e,tabValues:a}))throw Error("Can't select invalid tab value=".concat(e));p(e),v(e),j(e)},[v,j,a]),tabValues:a}}(e);return(0,i.jsxs)("div",{className:(0,a.Z)("tabs-container",g),children:[(0,i.jsx)(f,{...t,...e}),(0,i.jsx)(j,{...t,...e})]})}function b(e){let t=(0,p.Z)();return(0,i.jsx)(x,{...e,children:h(e.children)},String(t))}},50065:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return s}});var i=n(67294);let r={},a=i.createContext(r);function s(e){let t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);