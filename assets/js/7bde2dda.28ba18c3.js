"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([[80908],{75e3:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>b,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var o=t(85893),a=t(11151),i=t(74866),r=t(85162);const s={id:"customizing-tabbar",title:"Customizing bottom tab bar",sidebar_label:"Customizing tab bar"},c=void 0,l={id:"customizing-tabbar",title:"Customizing bottom tab bar",description:"This guide covers customizing the tab bar in createBottomTabNavigator. Make sure to install and configure the library according to the installation instructions first.",source:"@site/versioned_docs/version-7.x/customizing-bottom-tabs.md",sourceDirName:".",slug:"/customizing-tabbar",permalink:"/docs/customizing-tabbar",draft:!1,unlisted:!1,editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/customizing-bottom-tabs.md",tags:[],version:"7.x",frontMatter:{id:"customizing-tabbar",title:"Customizing bottom tab bar",sidebar_label:"Customizing tab bar"},sidebar:"docs",previous:{title:"Supporting safe areas",permalink:"/docs/handling-safe-area"},next:{title:"Hiding tab bar in screens",permalink:"/docs/hiding-tabbar-in-screens"}},u={},d=[{value:"Add icons for each tab",id:"add-icons-for-each-tab",level:2},{value:"Add badges to icons",id:"add-badges-to-icons",level:2}];function m(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["This guide covers customizing the tab bar in ",(0,o.jsx)(n.a,{href:"/docs/bottom-tab-navigator",children:(0,o.jsx)(n.code,{children:"createBottomTabNavigator"})}),". Make sure to install and configure the library according to the ",(0,o.jsx)(n.a,{href:"/docs/bottom-tab-navigator#installation",children:"installation instructions"})," first."]}),"\n",(0,o.jsx)(n.h2,{id:"add-icons-for-each-tab",children:"Add icons for each tab"}),"\n",(0,o.jsxs)(n.p,{children:["This is similar to how you would customize a stack navigator \u2014 there are some properties that are set when you initialize the tab navigator and others that can be customized per-screen in ",(0,o.jsx)(n.code,{children:"options"}),"."]}),"\n",(0,o.jsxs)(i.Z,{groupId:"config",queryString:"config",children:[(0,o.jsx)(r.Z,{value:"static",label:"Static",default:!0,children:(0,o.jsx)(n.pre,{"data-name":"Tab bar icons","data-snack":"true","data-dependencies":"@expo/vector-icons,@expo/vector-icons/Ionicons",children:(0,o.jsx)(n.code,{className:"language-js",metastring:'name="Tab bar icons" snack dependencies=@expo/vector-icons,@expo/vector-icons/Ionicons',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n// codeblock-focus-start\n// You can import Ionicons from @expo/vector-icons/Ionicons if you use Expo or\n// react-native-vector-icons/Ionicons otherwise.\nimport Ionicons from 'react-native-vector-icons/Ionicons';\n\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst RootTabs = createBottomTabNavigator({\n  screenOptions: ({ route }) => ({\n    // highlight-start\n    tabBarIcon: ({ focused, color, size }) => {\n      let iconName;\n\n      if (route.name === 'Home') {\n        iconName = focused\n          ? 'ios-information-circle'\n          : 'ios-information-circle-outline';\n      } else if (route.name === 'Settings') {\n        iconName = focused ? 'ios-list' : 'ios-list-outline';\n      }\n\n      // You can return any component that you like here!\n      return <Ionicons name={iconName} size={size} color={color} />;\n    },\n    // highlight-end\n    tabBarActiveTintColor: 'tomato',\n    tabBarInactiveTintColor: 'gray',\n  }),\n  screens: {\n    Home: HomeScreen,\n    Settings: SettingsScreen,\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(RootTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,o.jsx)(r.Z,{value:"dynamic",label:"Dynamic",children:(0,o.jsx)(n.pre,{"data-name":"Tab based navigation","data-snack":"true","data-dependencies":"@expo/vector-icons,@expo/vector-icons/Ionicons",children:(0,o.jsx)(n.code,{className:"language-js",metastring:'name="Tab based navigation" snack dependencies=@expo/vector-icons,@expo/vector-icons/Ionicons',children:"import * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n// codeblock-focus-start\n// You can import Ionicons from @expo/vector-icons/Ionicons if you use Expo or\n// react-native-vector-icons/Ionicons otherwise.\nimport Ionicons from 'react-native-vector-icons/Ionicons';\n\n// codeblock-focus-end\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\n// codeblock-focus-start\nfunction RootTabs() {\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        // highlight-start\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName;\n\n          if (route.name === 'Home') {\n            iconName = focused\n              ? 'ios-information-circle'\n              : 'ios-information-circle-outline';\n          } else if (route.name === 'Settings') {\n            iconName = focused ? 'ios-list' : 'ios-list-outline';\n          }\n\n          // You can return any component that you like here!\n          return <Ionicons name={iconName} size={size} color={color} />;\n        },\n        // highlight-end\n        tabBarActiveTintColor: 'tomato',\n        tabBarInactiveTintColor: 'gray',\n      })}\n    >\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n// codeblock-focus-end\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootTabs />\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,o.jsx)(n.p,{children:"Let's dissect this:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"tabBarIcon"})," is a supported option in bottom tab navigator. So we know we can use it on our screen components in the ",(0,o.jsx)(n.code,{children:"options"})," prop, but in this case chose to put it in the ",(0,o.jsx)(n.code,{children:"screenOptions"})," prop of ",(0,o.jsx)(n.code,{children:"Tab.Navigator"})," in order to centralize the icon configuration for convenience."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"tabBarIcon"})," is a function that is given the ",(0,o.jsx)(n.code,{children:"focused"})," state, ",(0,o.jsx)(n.code,{children:"color"}),", and ",(0,o.jsx)(n.code,{children:"size"})," params. If you take a peek further down in the configuration you will see ",(0,o.jsx)(n.code,{children:"tabBarActiveTintColor"})," and ",(0,o.jsx)(n.code,{children:"tabBarInactiveTintColor"}),". These default to the iOS platform defaults, but you can change them here. The ",(0,o.jsx)(n.code,{children:"color"})," that is passed through to the ",(0,o.jsx)(n.code,{children:"tabBarIcon"})," is either the active or inactive one, depending on the ",(0,o.jsx)(n.code,{children:"focused"})," state (focused is active). The ",(0,o.jsx)(n.code,{children:"size"})," is the size of the icon expected by the tab bar."]}),"\n",(0,o.jsxs)(n.li,{children:["Read the ",(0,o.jsx)(n.a,{href:"/docs/bottom-tab-navigator",children:"full API reference"})," for further information on ",(0,o.jsx)(n.code,{children:"createBottomTabNavigator"})," configuration options."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"add-badges-to-icons",children:"Add badges to icons"}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes we want to add badges to some icons. You can use the ",(0,o.jsxs)(n.a,{href:"/docs/bottom-tab-navigator#tabbarbadge",children:[(0,o.jsx)(n.code,{children:"tabBarBadge"})," option"]})," to do it:"]}),"\n",(0,o.jsxs)(i.Z,{groupId:"config",queryString:"config",children:[(0,o.jsx)(r.Z,{value:"static",label:"Static",default:!0,children:(0,o.jsx)(n.pre,{"data-name":"Tab based navigation","data-snack":"true",children:(0,o.jsx)(n.code,{className:"language-js",metastring:'name="Tab based navigation" snack',children:"import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { createStaticNavigation } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n\n// codeblock-focus-start\nconst RootTabs = createBottomTabNavigator({\n  screens: {\n    Home: {\n      screen: HomeScreen,\n      options: {\n        // highlight-start\n        tabBarBadge: 3,\n        // highlight-end\n      },\n    },\n    Settings: SettingsScreen,\n  },\n});\n// codeblock-focus-end\n\nconst Navigation = createStaticNavigation(RootTabs);\n\nexport default function App() {\n  return <Navigation />;\n}\n"})})}),(0,o.jsx)(r.Z,{value:"dynamic",label:"Dynamic",children:(0,o.jsx)(n.pre,{"data-name":"Tab based navigation","data-snack":"true",children:(0,o.jsx)(n.code,{className:"language-js",metastring:'name="Tab based navigation" snack',children:"import * as React from 'react';\nimport { Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nfunction HomeScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Home!</Text>\n    </View>\n  );\n}\n\nfunction SettingsScreen() {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\n// codeblock-focus-start\nfunction RootTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          // highlight-start\n          tabBarBadge: 3,\n          // highlight-end\n        }}\n      />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n// codeblock-focus-end\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <RootTabs />\n    </NavigationContainer>\n  );\n}\n"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["From UI perspective this component is ready to use, but you still need to find some way to pass down the badge count properly from somewhere else, like using ",(0,o.jsx)(n.a,{href:"https://react.dev/reference/react/useContext",children:"React Context"}),", ",(0,o.jsx)(n.a,{href:"https://redux.js.org/",children:"Redux"}),", ",(0,o.jsx)(n.a,{href:"https://mobx.js.org/",children:"MobX"})," or ",(0,o.jsx)(n.a,{href:"https://github.com/facebook/react-native/blob/master/Libraries/vendor/emitter/EventEmitter.js",children:"event emitters"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["You can also update the badge from within the screen component by using the ",(0,o.jsx)(n.code,{children:"setOptions"})," method:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const navigation = useNavigation();\n\nReact.useEffect(() => {\n  navigation.setOptions({\n    tabBarBadge: unreadMessagesCount,\n  });\n}, [navigation, unreadMessagesCount]);\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Tabs with badges",src:t(73580).Z+"",width:"300",height:"649"})})]})}function b(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>r});t(67294);var o=t(86010);const a={tabItem:"tabItem_Ymn6"};var i=t(85893);function r(e){let{children:n,hidden:t,className:r}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,o.Z)(a.tabItem,r),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>y});var o=t(67294),a=t(86010),i=t(12466),r=t(16550),s=t(20469),c=t(91980),l=t(67392),u=t(50012);function d(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:o,default:a}}=e;return{value:n,label:t,attributes:o,default:a}}))}(t);return function(e){const n=(0,l.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function b(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const a=(0,r.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(i),(0,o.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=m(e),[r,c]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!b({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=t.find((e=>e.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:i}))),[l,d]=h({queryString:t,groupId:a}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,u.Nk)(t);return[a,(0,o.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),p=(()=>{const e=l??g;return b({value:e,tabValues:i})?e:null})();(0,s.Z)((()=>{p&&c(p)}),[p]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!b({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),f(e)}),[d,f,i]),tabValues:i}}var f=t(72389);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(85893);function x(e){let{className:n,block:t,selectedValue:o,selectValue:r,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.o5)(),u=e=>{const n=e.currentTarget,t=c.indexOf(n),a=s[t].value;a!==o&&(l(n),r(a))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>c.push(e),onKeyDown:d,onClick:u,...i,className:(0,a.Z)("tabs__item",p.tabItem,i?.className,{"tabs__item--active":o===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function T(e){const n=g(e);return(0,v.jsxs)("div",{className:(0,a.Z)("tabs-container",p.tabList),children:[(0,v.jsx)(x,{...e,...n}),(0,v.jsx)(j,{...e,...n})]})}function y(e){const n=(0,f.Z)();return(0,v.jsx)(T,{...e,children:d(e.children)},String(n))}},73580:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/tabs-badges-af2f1f6228840836ac05e2a7636ffbd9.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>r});var o=t(67294);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);