"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["14617"],{65985:function(e,t,n){n.r(t),n.d(t,{metadata:()=>o,contentTitle:()=>s,default:()=>l,assets:()=>c,toc:()=>d,frontMatter:()=>r});var o=JSON.parse('{"id":"redux-integration","title":"Redux integration","description":"It is extremely easy to use Redux in an app with React Navigation. It\'s basically no different than without React Navigation.","source":"@site/versioned_docs/version-5.x/redux-integration.md","sourceDirName":".","slug":"/redux-integration","permalink":"/docs/5.x/redux-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-5.x/redux-integration.md","tags":[],"version":"5.x","frontMatter":{"id":"redux-integration","title":"Redux integration","sidebar_label":"Redux integration"},"sidebar":"docs","previous":{"title":"Type checking with TypeScript","permalink":"/docs/5.x/typescript"},"next":{"title":"MobX State Tree integration","permalink":"/docs/5.x/MST-integration"}}'),a=n("85893"),i=n("50065");let r={id:"redux-integration",title:"Redux integration",sidebar_label:"Redux integration"},s=void 0,c={},d=[{value:"Use a component that is <code>connect</code>ed in <code>options</code>",id:"use-a-component-that-is-connected-in-options",level:3},{value:"Pass the state you care about as a param to the screen",id:"pass-the-state-you-care-about-as-a-param-to-the-screen",level:3},{value:"Can I store the navigation state in Redux too?",id:"can-i-store-the-navigation-state-in-redux-too",level:2}];function u(e){let t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"It is extremely easy to use Redux in an app with React Navigation. It's basically no different than without React Navigation."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"import { Provider } from 'react-redux';\nimport { NavigationContainer } from '@react-navigation/native';\n\n// Render the app container component with the provider around it\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <NavigationContainer>{/* Screen configuration */}</NavigationContainer>\n    </Provider>\n  );\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Notice that we wrap our components in a ",(0,a.jsx)(t.code,{children:"Provider"})," like we'd normally do with ",(0,a.jsx)(t.code,{children:"react-redux"}),". Ta da! Now feel free to use ",(0,a.jsx)(t.code,{children:"connect"})," throughout your app."]}),"\n",(0,a.jsxs)(t.h3,{id:"use-a-component-that-is-connected-in-options",children:["Use a component that is ",(0,a.jsx)(t.code,{children:"connect"}),"ed in ",(0,a.jsx)(t.code,{children:"options"})]}),"\n",(0,a.jsxs)(t.p,{children:["Create a component, ",(0,a.jsx)(t.code,{children:"connect"})," it to the store, then use that component in the ",(0,a.jsx)(t.code,{children:"title"}),"."]}),"\n",(0,a.jsx)("samp",{id:"redux-integration"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"function Counter({ value }) {\n  return <Text>Count: {value}</Text>;\n}\n\nconst CounterContainer = connect((state) => ({ value: state.count }))(Counter);\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'<Screen\n  name="Test"\n  component={TestScreen}\n  options={{ title: () => <CounterContainer /> }}\n/>\n'})}),"\n",(0,a.jsx)(t.h3,{id:"pass-the-state-you-care-about-as-a-param-to-the-screen",children:"Pass the state you care about as a param to the screen"}),"\n",(0,a.jsx)(t.p,{children:"If the value isn't expected to change, you can just pass it from a connected component to the other screen as a param."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"<Button\n  title=\"Go to static counter screen\"\n  onPress={() =>\n    props.navigation.navigate('StaticCounter', {\n      count,\n    })\n  }\n/>\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"function StaticCounter({ route }) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>{route.params.count}</Text>\n    </View>\n  );\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"So our component will look like this:"}),"\n",(0,a.jsx)("samp",{id:"redux-integration-nav-param"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'<RootStack.Screen\n  name="StaticCounter"\n  component={StaticCounter}\n  options={({ route }) => ({ title: route.params.count })}\n/>\n'})}),"\n",(0,a.jsx)(t.h2,{id:"can-i-store-the-navigation-state-in-redux-too",children:"Can I store the navigation state in Redux too?"}),"\n",(0,a.jsx)(t.p,{children:"This is not possible. We don't support it because it's too easy to shoot yourself in the foot and slow down / break your app."}),"\n",(0,a.jsxs)(t.p,{children:["However it's possible to use ",(0,a.jsx)(t.a,{href:"https://github.com/reduxjs/redux-devtools",children:(0,a.jsx)(t.code,{children:"redux-devtools-extension"})})," to inspect the ",(0,a.jsx)(t.a,{href:"/docs/5.x/navigation-state",children:"navigation state"})," and actions, as well as perform time travel debugging by using the ",(0,a.jsxs)(t.a,{href:"/docs/5.x/devtools",children:[(0,a.jsx)(t.code,{children:"devtools"})," package"]}),"."]})]})}function l(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return s},a:function(){return r}});var o=n(67294);let a={},i=o.createContext(a);function r(e){let t=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);