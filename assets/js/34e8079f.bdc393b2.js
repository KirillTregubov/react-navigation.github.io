"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["19718"],{52122:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>c,default:()=>h,assets:()=>r,toc:()=>l,frontMatter:()=>s});var i=JSON.parse('{"id":"navigation-lifecycle","title":"Navigation lifecycle","description":"In a previous section, we worked with a stack navigator that has two screens (Home and Details) and learned how to use navigation.navigate(\'RouteName\') to navigate between the routes.","source":"@site/versioned_docs/version-6.x/navigation-lifecycle.md","sourceDirName":".","slug":"/navigation-lifecycle","permalink":"/docs/6.x/navigation-lifecycle","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-6.x/navigation-lifecycle.md","tags":[],"version":"6.x","frontMatter":{"id":"navigation-lifecycle","title":"Navigation lifecycle","sidebar_label":"Navigation lifecycle"},"sidebar":"docs","previous":{"title":"Nesting navigators","permalink":"/docs/6.x/nesting-navigators"},"next":{"title":"Next steps","permalink":"/docs/6.x/next-steps"}}'),o=t("85893"),a=t("50065");let s={id:"navigation-lifecycle",title:"Navigation lifecycle",sidebar_label:"Navigation lifecycle"},c=void 0,r={},l=[{value:"Example scenario",id:"example-scenario",level:2},{value:"React Navigation lifecycle events",id:"react-navigation-lifecycle-events",level:2},{value:"Summary",id:"summary",level:2}];function d(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["In a previous section, we worked with a stack navigator that has two screens (",(0,o.jsx)(n.code,{children:"Home"})," and ",(0,o.jsx)(n.code,{children:"Details"}),") and learned how to use ",(0,o.jsx)(n.code,{children:"navigation.navigate('RouteName')"})," to navigate between the routes."]}),"\n",(0,o.jsxs)(n.p,{children:["An important question in this context is: what happens with ",(0,o.jsx)(n.code,{children:"Home"})," when we navigate away from it, or when we come back to it? How does a route find out that a user is leaving it or coming back to it?"]}),"\n",(0,o.jsxs)(n.p,{children:["If you are coming to react-navigation from a web background, you may assume that when user navigates from route ",(0,o.jsx)(n.code,{children:"A"})," to route ",(0,o.jsx)(n.code,{children:"B"}),", ",(0,o.jsx)(n.code,{children:"A"})," will unmount (its ",(0,o.jsx)(n.code,{children:"componentWillUnmount"})," is called) and ",(0,o.jsx)(n.code,{children:"A"})," will mount again when user comes back to it. While these React lifecycle methods are still valid and are used in react-navigation, their usage differs from the web. This is driven by more complex needs of mobile navigation."]}),"\n",(0,o.jsx)(n.h2,{id:"example-scenario",children:"Example scenario"}),"\n",(0,o.jsxs)(n.p,{children:["Consider a stack navigator with screens A and B. After navigating to A, its ",(0,o.jsx)(n.code,{children:"componentDidMount"})," is called. When pushing B, its ",(0,o.jsx)(n.code,{children:"componentDidMount"})," is also called, but A remains mounted on the stack and its ",(0,o.jsx)(n.code,{children:"componentWillUnmount"})," is therefore not called."]}),"\n",(0,o.jsxs)(n.p,{children:["When going back from B to A, ",(0,o.jsx)(n.code,{children:"componentWillUnmount"})," of B is called, but ",(0,o.jsx)(n.code,{children:"componentDidMount"})," of A is not because A remained mounted the whole time."]}),"\n",(0,o.jsx)(n.p,{children:"Similar results can be observed (in combination) with other navigators as well. Consider a tab navigator with two tabs, where each tab is a stack navigator:"}),"\n",(0,o.jsx)("samp",{id:"navigation-lifecycle"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'function App() {\n  return (\n    <NavigationContainer>\n      <Tab.Navigator>\n        <Tab.Screen name="First">\n          {() => (\n            <SettingsStack.Navigator>\n              <SettingsStack.Screen\n                name="Settings"\n                component={SettingsScreen}\n              />\n              <SettingsStack.Screen name="Profile" component={ProfileScreen} />\n            </SettingsStack.Navigator>\n          )}\n        </Tab.Screen>\n        <Tab.Screen name="Second">\n          {() => (\n            <HomeStack.Navigator>\n              <HomeStack.Screen name="Home" component={HomeScreen} />\n              <HomeStack.Screen name="Details" component={DetailsScreen} />\n            </HomeStack.Navigator>\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n    </NavigationContainer>\n  );\n}\n'})}),"\n",(0,o.jsx)("video",{playsInline:!0,autoPlay:!0,muted:!0,loop:!0,children:(0,o.jsx)("source",{src:"/assets/navigators/lifecycle.mp4"})}),"\n",(0,o.jsxs)(n.p,{children:["We start on the ",(0,o.jsx)(n.code,{children:"HomeScreen"})," and navigate to ",(0,o.jsx)(n.code,{children:"DetailsScreen"}),". Then we use the tab bar to switch to the ",(0,o.jsx)(n.code,{children:"SettingsScreen"})," and navigate to ",(0,o.jsx)(n.code,{children:"ProfileScreen"}),". After this sequence of operations is done, all 4 of the screens are mounted! If you use the tab bar to switch back to the ",(0,o.jsx)(n.code,{children:"HomeStack"}),", you'll notice you'll be presented with the ",(0,o.jsx)(n.code,{children:"DetailsScreen"})," - the navigation state of the ",(0,o.jsx)(n.code,{children:"HomeStack"})," has been preserved!"]}),"\n",(0,o.jsx)(n.h2,{id:"react-navigation-lifecycle-events",children:"React Navigation lifecycle events"}),"\n",(0,o.jsx)(n.p,{children:'Now that we understand how React lifecycle methods work in React Navigation, let\'s answer the question we asked at the beginning: "How do we find out that a user is leaving (blur) it or coming back to it (focus)?"'}),"\n",(0,o.jsxs)(n.p,{children:["React Navigation emits events to screen components that subscribe to them. We can listen to ",(0,o.jsx)(n.code,{children:"focus"})," and ",(0,o.jsx)(n.code,{children:"blur"})," events to know when a screen comes into focus or goes out of focus respectively."]}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)("samp",{id:"focus-and-blur"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"function Profile({ navigation }) {\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      // Screen was focused\n      // Do something\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return <ProfileContent />;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/docs/6.x/navigation-events",children:"Navigation events"})," for more details on the available events and the API usage."]}),"\n",(0,o.jsxs)(n.p,{children:["Instead of adding event listeners manually, we can use the ",(0,o.jsx)(n.a,{href:"/docs/6.x/use-focus-effect",children:(0,o.jsx)(n.code,{children:"useFocusEffect"})})," hook to perform side effects. It's like React's ",(0,o.jsx)(n.code,{children:"useEffect"})," hook, but it ties into the navigation lifecycle."]}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)("samp",{id:"use-focus-effect"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { useFocusEffect } from '@react-navigation/native';\n\nfunction Profile() {\n  useFocusEffect(\n    React.useCallback(() => {\n      // Do something when the screen is focused\n\n      return () => {\n        // Do something when the screen is unfocused\n        // Useful for cleanup functions\n      };\n    }, [])\n  );\n\n  return <ProfileContent />;\n}\n"})}),"\n",(0,o.jsx)("video",{playsInline:!0,autoPlay:!0,muted:!0,loop:!0,children:(0,o.jsx)("source",{src:"/assets/navigators/lifecycle-focus.mp4"})}),"\n",(0,o.jsxs)(n.p,{children:["If you want to render different things based on if the screen is focused or not, you can use the ",(0,o.jsx)(n.a,{href:"/docs/6.x/use-is-focused",children:(0,o.jsx)(n.code,{children:"useIsFocused"})})," hook which returns a boolean indicating whether the screen is focused."]}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["While React's lifecycle methods are still valid, React Navigation adds more events that you can subscribe to through the ",(0,o.jsx)(n.code,{children:"navigation"})," prop."]}),"\n",(0,o.jsxs)(n.li,{children:["You may also use the ",(0,o.jsx)(n.code,{children:"useFocusEffect"})," or ",(0,o.jsx)(n.code,{children:"useIsFocused"})," hooks."]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return c},a:function(){return s}});var i=t(67294);let o={},a=i.createContext(o);function s(e){let n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);