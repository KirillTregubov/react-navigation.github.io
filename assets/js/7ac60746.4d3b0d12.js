"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["76927"],{7719:function(e,n,t){t.r(n),t.d(n,{metadata:()=>a,contentTitle:()=>s,default:()=>p,assets:()=>c,toc:()=>l,frontMatter:()=>i});var a=JSON.parse('{"id":"drawer-based-navigation","title":"Drawer navigation","description":"The drawer navigator allows you to present a navigation menu to your users. It can be customized out of the box, or you can completely control with a custom component.","source":"@site/versioned_docs/version-3.x/drawer-based-navigation.md","sourceDirName":".","slug":"/drawer-based-navigation","permalink":"/docs/3.x/drawer-based-navigation","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-3.x/drawer-based-navigation.md","tags":[],"version":"3.x","frontMatter":{"id":"drawer-based-navigation","title":"Drawer navigation","sidebar_label":"Drawer navigation"},"sidebar":"version-3.x-docs","previous":{"title":"Tab navigation","permalink":"/docs/3.x/tab-based-navigation"},"next":{"title":"Authentication flows","permalink":"/docs/3.x/auth-flow"}}'),r=t("85893"),o=t("50065");let i={id:"drawer-based-navigation",title:"Drawer navigation",sidebar_label:"Drawer navigation"},s=void 0,c={},l=[];function d(e){let n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The drawer navigator allows you to present a navigation menu to your users. It can be customized out of the box, or you can completely control with a custom component."}),"\n",(0,r.jsxs)(n.p,{children:["This guide covers ",(0,r.jsx)(n.a,{href:"/docs/3.x/drawer-navigator",children:"createDrawerNavigator"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"class HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <TouchableOpacity onPress={this.props.navigation.openDrawer}>\n          <Text>Open Drawer</Text>\n        </TouchableOpacity>\n        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Home</Text>\n      </View>\n    );\n  }\n}\n\nclass SettingsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <TouchableOpacity onPress={this.props.navigation.openDrawer}>\n          <Text>Open Drawer</Text>\n        </TouchableOpacity>\n        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Settings</Text>\n      </View>\n    );\n  }\n}\n\nconst DrawerNavigator = createDrawerNavigator(\n  {\n    Home: HomeScreen,\n    Settings: SettingsScreen,\n  },\n  {\n    hideStatusBar: true,\n    drawerBackgroundColor: 'rgba(255,255,255,.9)',\n    overlayColor: '#6b52ae',\n    contentOptions: {\n      activeTintColor: '#fff',\n      activeBackgroundColor: '#6b52ae',\n    },\n  }\n);\n\nexport default createAppContainer(DrawerNavigator);\n"})}),"\n",(0,r.jsx)("a",{href:"https://snack.expo.io/@react-navigation/basic-drawer-v3",target:"blank",class:"run-code-button",children:"\u2192 Run this code"}),"\n",(0,r.jsx)(n.p,{children:"To open and close drawer, use the following helpers to open and close the drawer:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"this.props.navigation.openDrawer();\nthis.props.navigation.closeDrawer();\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you would like to toggle the drawer you call the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"this.props.navigation.toggleDrawer();\n"})}),"\n",(0,r.jsx)(n.p,{children:"Each of these functions, behind the scenes, are simply dispatching actions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"this.props.navigation.dispatch(DrawerActions.openDrawer());\nthis.props.navigation.dispatch(DrawerActions.closeDrawer());\nthis.props.navigation.dispatch(DrawerActions.toggleDrawer());\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you would like to determine if drawer is open or closed, you can do the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const parent = this.props.navigation.dangerouslyGetParent();\nconst isDrawerOpen = parent && parent.state && parent.state.isDrawerOpen;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Additionally, you can automatically hide the status bar by passing the DrawerLayout prop of ",(0,r.jsx)(n.code,{children:"hideStatusBar: true"}),"."]})]})}function p(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return s},a:function(){return i}});var a=t(67294);let r={},o=a.createContext(r);function i(e){let n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);