"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["16378"],{86684:function(e,t,n){n.r(t),n.d(t,{metadata:()=>a,contentTitle:()=>r,default:()=>h,assets:()=>c,toc:()=>l,frontMatter:()=>o});var a=JSON.parse('{"id":"state-persistence","title":"State persistence","description":"You may want to save the user\'s location in the app, so that they are immediately returned to the same location after the app is restarted.","source":"@site/versioned_docs/version-3.x/state-persistence.md","sourceDirName":".","slug":"/state-persistence","permalink":"/docs/3.x/state-persistence","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-3.x/state-persistence.md","tags":[],"version":"3.x","frontMatter":{"id":"state-persistence","title":"State persistence","sidebar_label":"State persistence"},"sidebar":"version-3.x-docs","previous":{"title":"Themes","permalink":"/docs/3.x/themes"},"next":{"title":"Redux integration","permalink":"/docs/3.x/redux-integration"}}'),i=n("85893"),s=n("50065");let o={id:"state-persistence",title:"State persistence",sidebar_label:"State persistence"},r=void 0,c={},l=[{value:"Usage",id:"usage",level:2},{value:"Development Mode",id:"development-mode",level:3},{value:"Loading View",id:"loading-view",level:3},{value:"Warning: Serializable State",id:"warning-serializable-state",level:2},{value:"Warning: Route/Router definition changes",id:"warning-routerouter-definition-changes",level:2}];function d(e){let t={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"You may want to save the user's location in the app, so that they are immediately returned to the same location after the app is restarted."}),"\n",(0,i.jsx)(t.p,{children:"This is especially valuable during development because it allows the developer to stay on the same screen when they refresh the app."}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Note: This feature is currently considered experimental, because of the warnings listed at the end of this page. Use with caution!"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(t.p,{children:["You can enable persistence for your top-level navigator by rendering it with ",(0,i.jsx)(t.code,{children:"persistNavigationState"})," and ",(0,i.jsx)(t.code,{children:"loadNavigationState"})," props:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"persistNavigationState"})," is an async function that receives single argument - the navigation state object. The function should persist it."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"loadNavigationState"})," is an async function that does the inverse - it should load the persisted navigation state and return a Promise that resolves with the navigation state object. If the function rejects, React Navigation will start as if no state was provided."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:'const AppNavigator = createStackNavigator({...});\nconst persistenceKey = "persistenceKey"\nconst persistNavigationState = async (navState) => {\n  try {\n    await AsyncStorage.setItem(persistenceKey, JSON.stringify(navState))\n  } catch(err) {\n    // handle the error according to your needs\n  }\n}\nconst loadNavigationState = async () => {\n  const jsonString = await AsyncStorage.getItem(persistenceKey)\n  return JSON.parse(jsonString)\n}\n\nconst App = () => <AppNavigator persistNavigationState={persistNavigationState} loadNavigationState={loadNavigationState} />;\n'})}),"\n",(0,i.jsx)(t.h3,{id:"development-mode",children:"Development Mode"}),"\n",(0,i.jsx)(t.p,{children:"This feature is particularly useful in development mode. You can enable it selectively using the following approach:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const AppNavigator = createStackNavigator({...});\nfunction getPersistenceFunctions() {\n  return __DEV__ ? {\n    persistNavigationState: ...,\n    loadNavigationState: ...,\n  } : undefined;\n}\nconst App = () => <AppNavigator {...getPersistenceFunctions()} />;\n"})}),"\n",(0,i.jsx)(t.h3,{id:"loading-view",children:"Loading View"}),"\n",(0,i.jsxs)(t.p,{children:["Because the state is loaded asynchronously, the app must render an empty/loading view for a moment before the ",(0,i.jsx)(t.code,{children:"loadNavigationState"})," function returns. To customize the loading view that is rendered during this time, you can use the ",(0,i.jsx)(t.code,{children:"renderLoadingExperimental"})," prop:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"<AppNavigator\n  persistNavigationState={...}\n  loadNavigationState={...}\n  renderLoadingExperimental={() => <ActivityIndicator />}\n/>\n"})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Note: This API may change in the future, which is why it is labeled experimental"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"warning-serializable-state",children:"Warning: Serializable State"}),"\n",(0,i.jsx)(t.p,{children:"Each param, route, and navigation state must be fully serializable for this feature to work. Typically, you would serialize the state as a JSON string. This means that your routes and params must contain no functions, class instances, or recursive data structures."}),"\n",(0,i.jsxs)(t.p,{children:["If you need to modify the nav state object, you may do so in the ",(0,i.jsx)(t.code,{children:"loadNavigationState"})," / ",(0,i.jsx)(t.code,{children:"persistNavigationState"})," functions, but note that if your ",(0,i.jsx)(t.code,{children:"loadNavigationState"})," provides an invalid object (an object from which the navigation state cannot be recovered), React Navigation may not be able to handle the situation gracefully."]}),"\n",(0,i.jsx)(t.h2,{id:"warning-routerouter-definition-changes",children:"Warning: Route/Router definition changes"}),"\n",(0,i.jsx)(t.p,{children:"When your application code changes to support new routes or different routers for a given route in your navigation state, the app may break when presented with the old navigation state."}),"\n",(0,i.jsx)(t.p,{children:"This may happen regularly during development as you re-configure your routes and navigator hierarchy. But it also may happen in production when you release a new version of your app!"}),"\n",(0,i.jsx)(t.p,{children:"The conservative behavior is to wipe the navigation state when the app has been updated. The easiest way to do this is to refer to a different persistence key for each version that you release to users."}),"\n",(0,i.jsxs)(t.p,{children:["React Navigation uses React's ",(0,i.jsx)(t.code,{children:"componentDidCatch"})," functionality to attempt to mitigate crashes caused by route definition changes, but this is considered experimental and may not catch all errors."]})]})}function h(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return r},a:function(){return o}});var a=n(67294);let i={},s=a.createContext(i);function o(e){let t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);