"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["21210"],{52796:function(e,n,t){t.r(n),t.d(n,{metadata:()=>r,contentTitle:()=>a,default:()=>h,assets:()=>c,toc:()=>l,frontMatter:()=>s});var r=JSON.parse('{"id":"server-rendering","title":"Server rendering","description":"This guide will cover how to server render your React Native app using React Native for Web and React Navigation. We\'ll cover the following cases:","source":"@site/versioned_docs/version-5.x/server-rendering.md","sourceDirName":".","slug":"/server-rendering","permalink":"/docs/5.x/server-rendering","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-5.x/server-rendering.md","tags":[],"version":"5.x","frontMatter":{"id":"server-rendering","title":"Server rendering","sidebar_label":"Server rendering"},"sidebar":"docs","previous":{"title":"Web support","permalink":"/docs/5.x/web-support"},"next":{"title":"Screen tracking for analytics","permalink":"/docs/5.x/screen-tracking"}}'),o=t("85893"),i=t("50065");let s={id:"server-rendering",title:"Server rendering",sidebar_label:"Server rendering"},a=void 0,c={},l=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Rendering the app",id:"rendering-the-app",level:2},{value:"Handling 404 or other status codes",id:"handling-404-or-other-status-codes",level:2},{value:"Summary",id:"summary",level:2}];function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"This guide will cover how to server render your React Native app using React Native for Web and React Navigation. We'll cover the following cases:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Rendering the correct layout depending on the request URL"}),"\n",(0,o.jsx)(n.li,{children:"Setting appropriate page metadata based on the focused screen"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,o.jsx)(n.p,{children:"Before you follow the guide, make sure that your app already renders fine on server. To do that, you will need to ensure the following:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["All of the dependencies that you use are ",(0,o.jsx)(n.a,{href:"https://github.com/react-native-community/bob",children:"compiled before publishing"})," to npm, so that you don't get syntax errors on Node."]}),"\n",(0,o.jsxs)(n.li,{children:["Node is configured to be able to ",(0,o.jsx)(n.code,{children:"require"})," asset files such as images and fonts. You can try ",(0,o.jsx)(n.a,{href:"https://github.com/catamphetamine/webpack-isomorphic-tools",children:"webpack-isomorphic-tools"})," to do that."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"react-native"})," is aliased to ",(0,o.jsx)(n.code,{children:"react-native-web"}),". You can do it with ",(0,o.jsx)(n.a,{href:"https://github.com/tleunen/babel-plugin-module-resolver",children:"babel-plugin-module-resolver"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Note: Some of the libraries in React Navigation don't work well on Web, such as ",(0,o.jsx)(n.code,{children:"@react-navigation/material-top-tabs"}),". SSR also doesn't work if you're using Expo libraries."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"rendering-the-app",children:"Rendering the app"}),"\n",(0,o.jsxs)(n.p,{children:["First, let's take a look at an example of how you'd do ",(0,o.jsx)(n.a,{href:"http://necolas.github.io/react-native-web/docs/?path=/docs/guides-server-side--page",children:"server rendering with React Native Web"})," without involving React Navigation:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import { AppRegistry } from \'react-native-web\';\nimport ReactDOMServer from \'react-dom/server\';\nimport App from \'./src/App\';\n\nconst { element, getStyleElement } = AppRegistry.getApplication(\'App\');\n\nconst html = ReactDOMServer.renderToString(element);\nconst css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\nconst document = `\n  <!DOCTYPE html>\n  <html style="height: 100%">\n  <meta charset="utf-8">\n  <meta httpEquiv="X-UA-Compatible" content="IE=edge">\n  <meta\n    name="viewport"\n    content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover"\n  >\n  ${css}\n  <body style="min-height: 100%">\n  <div id="root" style="display: flex; min-height: 100vh">\n  ${html}\n  </div>\n`;\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Here, ",(0,o.jsx)(n.code,{children:"./src/App"})," is the file where you have ",(0,o.jsx)(n.code,{children:"AppRegistry.registerComponent('App', () => App)"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["If you're using React Navigation in your app, this will render the screens rendered by your home page. However, if you have ",(0,o.jsx)(n.a,{href:"/docs/5.x/configuring-links",children:"configured links"})," in your app, you'd want to render the correct screens for the request URL on server so that it matches what'll be rendered on the client."]}),"\n",(0,o.jsxs)(n.p,{children:["We can use the ",(0,o.jsx)(n.a,{href:"/docs/5.x/server-container",children:(0,o.jsx)(n.code,{children:"ServerContainer"})})," to do that by passing this info in the ",(0,o.jsx)(n.code,{children:"location"})," prop. For example, with Koa, you can use the ",(0,o.jsx)(n.code,{children:"path"})," and ",(0,o.jsx)(n.code,{children:"search"})," properties from the context argument:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'app.use(async (ctx) => {\n  const location = new URL(ctx.url, \'https://example.org/\');\n\n  const { element, getStyleElement } = AppRegistry.getApplication(\'App\');\n\n  const html = ReactDOMServer.renderToString(\n    <ServerContainer location={location}>{element}</ServerContainer>\n  );\n\n  const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\n  const document = `\n    <!DOCTYPE html>\n    <html style="height: 100%">\n    <meta charset="utf-8">\n    <meta httpEquiv="X-UA-Compatible" content="IE=edge">\n    <meta\n      name="viewport"\n      content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover"\n    >\n    ${css}\n    <body style="min-height: 100%">\n    <div id="root" style="display: flex; min-height: 100vh">\n    ${html}\n    </div>\n`;\n\n  ctx.body = document;\n});\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You may also want to set the correct document title and descriptions for search engines, open graph etc. To do that, you can pass a ",(0,o.jsx)(n.code,{children:"ref"})," to the container which will give you the current screen's options."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'app.use(async (ctx) => {\n  const location = new URL(ctx.url, \'https://example.org/\');\n\n  const { element, getStyleElement } = AppRegistry.getApplication(\'App\');\n\n  const ref = React.createRef<ServerContainerRef>();\n\n  const html = ReactDOMServer.renderToString(\n    <ServerContainer\n      ref={ref}\n      location={location}\n    >\n      {element}\n    </ServerContainer>\n  );\n\n  const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\n  const options = ref.current?.getCurrentOptions();\n\n  const document = `\n    <!DOCTYPE html>\n    <html style="height: 100%">\n    <meta charset="utf-8">\n    <meta httpEquiv="X-UA-Compatible" content="IE=edge">\n    <meta\n      name="viewport"\n      content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover"\n    >\n    ${css}\n    <title>${options.title}</title>\n    <body style="min-height: 100%">\n    <div id="root" style="display: flex; min-height: 100vh">\n    ${html}\n    </div>\n`;\n\n  ctx.body = document;\n});\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Make sure that you have specified a ",(0,o.jsx)(n.code,{children:"title"})," option in your screens:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"<Stack.Screen\n  name=\"Profile\"\n  component={ProfileScreen}\n  options={{ title: 'My profile' }}\n/>\n"})}),"\n",(0,o.jsx)(n.h2,{id:"handling-404-or-other-status-codes",children:"Handling 404 or other status codes"}),"\n",(0,o.jsxs)(n.p,{children:["When ",(0,o.jsx)(n.a,{href:"/docs/5.x/configuring-links#handling-unmatched-routes-or-404",children:"rendering a screen for an invalid URL"}),", we should also return a ",(0,o.jsx)(n.code,{children:"404"})," status code from the server."]}),"\n",(0,o.jsx)(n.p,{children:"First, we need to create a context where we'll attach the status code. To do this, place the following code in a separate file that we will be importing on both the server and client:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import * as React from 'react';\n\nconst StatusCodeContext = React.createContext();\n\nexport default StatusCodeContext;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then, we need to use the context in our ",(0,o.jsx)(n.code,{children:"NotFound"})," screen. Here, we add a ",(0,o.jsx)(n.code,{children:"code"})," property with the value of ",(0,o.jsx)(n.code,{children:"404"})," to signal that the screen was not found:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"function NotFound() {\n  const status = React.useContext(StatusCodeContext);\n\n  if (status) {\n    staus.code = 404;\n  }\n\n  return (\n    <View>\n      <Text>Oops! This URL doesn't exist.</Text>\n    </View>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"You could also attach additional information in this object if you need to."}),"\n",(0,o.jsxs)(n.p,{children:["Next, we need to create a status object to pass in the context on our server. By default, we'll set the ",(0,o.jsx)(n.code,{children:"code"})," to ",(0,o.jsx)(n.code,{children:"200"}),". Then pass the object in ",(0,o.jsx)(n.code,{children:"StatusCodeContext.Provider"})," which should wrap the element with ",(0,o.jsx)(n.code,{children:"ServerContainer"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// Create a status object\nconst status = { code: 200 };\n\nconst html = ReactDOMServer.renderToString(\n  // Pass the status object via context\n  <StatusCodeContext.Provider value={status}>\n    <ServerContainer ref={ref} location={location}>\n      {element}\n    </ServerContainer>\n  </StatusCodeContext.Provider>\n);\n\n// After rendering, get the status code and use it for server's response\nctx.status = status.code;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["After we render the app with ",(0,o.jsx)(n.code,{children:"ReactDOMServer.renderToString"}),", the ",(0,o.jsx)(n.code,{children:"code"})," property of the ",(0,o.jsx)(n.code,{children:"status"})," object will be updated to be ",(0,o.jsx)(n.code,{children:"404"})," if the ",(0,o.jsx)(n.code,{children:"NotFound"})," screen was rendered."]}),"\n",(0,o.jsxs)(n.p,{children:["You can follow a similar approach for other status codes too, for example, ",(0,o.jsx)(n.code,{children:"401"})," for unauthorized etc."]}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Use the ",(0,o.jsx)(n.code,{children:"location"})," prop on ",(0,o.jsx)(n.code,{children:"ServerContainer"})," to render correct screens based on the incoming request."]}),"\n",(0,o.jsxs)(n.li,{children:["Attach a ",(0,o.jsx)(n.code,{children:"ref"})," to the ",(0,o.jsx)(n.code,{children:"ServerContainer"})," get options for the current screen."]}),"\n",(0,o.jsx)(n.li,{children:"Use context to attach more information such as status code."}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return s}});var r=t(67294);let o={},i=r.createContext(o);function s(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);