"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["30966"],{37744:function(n,t,e){e.r(t),e.d(t,{metadata:()=>o,contentTitle:()=>c,default:()=>h,assets:()=>s,toc:()=>p,frontMatter:()=>r});var o=JSON.parse('{"id":"connecting-navigation-prop","title":"Access the navigation prop from any component","description":"withNavigation is a higher order component which passes the navigation prop into a wrapped Component. It\'s useful when you cannot pass the navigation prop into the component directly, or don\'t want to pass it in case of a deeply nested child.","source":"@site/versioned_docs/version-2.x/connecting-navigation-prop.md","sourceDirName":".","slug":"/connecting-navigation-prop","permalink":"/docs/2.x/connecting-navigation-prop","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-2.x/connecting-navigation-prop.md","tags":[],"version":"2.x","frontMatter":{"id":"connecting-navigation-prop","title":"Access the navigation prop from any component","sidebar_label":"Access the navigation prop from any component"},"sidebar":"version-2.x-docs","previous":{"title":"Custom Android back button behavior","permalink":"/docs/2.x/custom-android-back-button-handling"},"next":{"title":"Navigating without the navigation prop","permalink":"/docs/2.x/navigating-without-navigation-prop"}}'),i=e("85893"),a=e("50065");let r={id:"connecting-navigation-prop",title:"Access the navigation prop from any component",sidebar_label:"Access the navigation prop from any component"},c=void 0,s={},p=[];function d(n){let t={a:"a",code:"code",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"/docs/2.x/with-navigation",children:(0,i.jsx)(t.code,{children:"withNavigation"})})," is a higher order component which passes the ",(0,i.jsx)(t.code,{children:"navigation"})," prop into a wrapped Component. It's useful when you cannot pass the ",(0,i.jsx)(t.code,{children:"navigation"})," prop into the component directly, or don't want to pass it in case of a deeply nested child."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"import React from 'react';\nimport { Button } from 'react-native';\n\nexport default class MyBackButton extends React.Component {\n  render() {\n    // This will throw an 'undefined is not a function' exception because the navigation\n    // prop is undefined.\n    return (\n      <Button\n        title=\"Back\"\n        onPress={() => {\n          this.props.navigation.goBack();\n        }}\n      />\n    );\n  }\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["To resolve this exception, you could pass the ",(0,i.jsx)(t.code,{children:"navigation"})," prop in to ",(0,i.jsx)(t.code,{children:"MyBackButton"})," when you render it from a screen, like so: ",(0,i.jsx)(t.code,{children:"<MyBackButton navigation={this.props.navigation} />"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Alternatively, you can use the ",(0,i.jsx)(t.code,{children:"withNavigation"})," function to provide the ",(0,i.jsx)(t.code,{children:"navigation"})," prop automatically (through React context, if you're curious). This function behaves similarly to Redux's ",(0,i.jsx)(t.code,{children:"connect"})," function, except rather than providing the ",(0,i.jsx)(t.code,{children:"dispatch"})," prop to the component it wraps, it provides the ",(0,i.jsx)(t.code,{children:"navigation"})," prop."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"import React from 'react';\nimport { Button } from 'react-native';\nimport { withNavigation } from 'react-navigation';\n\nclass MyBackButton extends React.Component {\n  render() {\n    return (\n      <Button\n        title=\"Back\"\n        onPress={() => {\n          this.props.navigation.goBack();\n        }}\n      />\n    );\n  }\n}\n\n// withNavigation returns a component that wraps MyBackButton and passes in the\n// navigation prop\nexport default withNavigation(MyBackButton);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Using this approach, you can render ",(0,i.jsx)(t.code,{children:"MyBackButton"})," anywhere in your app without passing in a ",(0,i.jsx)(t.code,{children:"navigation"})," prop explicitly and it will work as expected."]})]})}function h(n={}){let{wrapper:t}={...(0,a.a)(),...n.components};return t?(0,i.jsx)(t,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},50065:function(n,t,e){e.d(t,{Z:function(){return c},a:function(){return r}});var o=e(67294);let i={},a=o.createContext(i);function r(n){let t=o.useContext(a);return o.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function c(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),o.createElement(a.Provider,{value:t},n.children)}}}]);