"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["73681"],{49667:function(e,n,t){t.r(n),t.d(n,{metadata:()=>a,contentTitle:()=>i,default:()=>u,assets:()=>c,toc:()=>d,frontMatter:()=>o});var a=JSON.parse('{"id":"status-bar","title":"Different status bar configuration based on route","description":"If you don\'t have a navigation header, or your navigation header changes color based on the route, you\'ll want to ensure that the correct color is used for the content.","source":"@site/versioned_docs/version-1.x/status-bar.md","sourceDirName":".","slug":"/status-bar","permalink":"/docs/1.x/status-bar","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-1.x/status-bar.md","tags":[],"version":"1.x","frontMatter":{"id":"status-bar","title":"Different status bar configuration based on route","sidebar_label":"Different status bar configuration based on route"},"sidebar":"docs","previous":{"title":"iPhone X support","permalink":"/docs/1.x/handling-iphonex"},"next":{"title":"Custom Android back button behavior","permalink":"/docs/1.x/custom-android-back-button-handling"}}'),r=t("85893"),s=t("50065");let o={id:"status-bar",title:"Different status bar configuration based on route",sidebar_label:"Different status bar configuration based on route"},i=void 0,c={},d=[{value:"StackNavigator and DrawerNavigator",id:"stacknavigator-and-drawernavigator",level:2},{value:"TabNavigator",id:"tabnavigator",level:2}];function l(e){let n={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"If you don't have a navigation header, or your navigation header changes color based on the route, you'll want to ensure that the correct color is used for the content."}),"\n",(0,r.jsx)(n.h2,{id:"stacknavigator-and-drawernavigator",children:"StackNavigator and DrawerNavigator"}),"\n",(0,r.jsxs)(n.p,{children:["This is a simple task when using the StackNavigator or DrawerNavigator. You can simply render the ",(0,r.jsx)(n.code,{children:"StatusBar"})," component, which is exposed by React Native, and set your config."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class Screen1 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#6a51ae' }]}>\n        <StatusBar barStyle=\"light-content\" backgroundColor=\"#6a51ae\" />\n        <Text style={[styles.paragraph, { color: '#fff' }]}>Light Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen2')}\n          color={isAndroid ? 'blue' : '#fff'}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n\nclass Screen2 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>\n        <StatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\n        <Text style={styles.paragraph}>Dark Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen1')}\n        />\n      </SafeAreaView>\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export default StackNavigator(\n  {\n    Screen1: {\n      screen: Screen1,\n    },\n    Screen2: {\n      screen: Screen2,\n    },\n  },\n  {\n    headerMode: 'none',\n  }\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"StackNavigator with different StatusBar configs",src:t(26135).Z+"",width:"895",height:"843"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export default DrawerNavigator({\n  Screen1: {\n    screen: Screen1,\n  },\n  Screen2: {\n    screen: Screen2,\n  },\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"DrawerNavigator with different StatusBar configs",src:t(22391).Z+"",width:"895",height:"843"})}),"\n",(0,r.jsx)(n.h2,{id:"tabnavigator",children:"TabNavigator"}),"\n",(0,r.jsxs)(n.p,{children:["If you're using a TabNavigator it's a bit more complex because the screens on all of your tabs are rendered at once - that means that the last ",(0,r.jsx)(n.code,{children:"StatusBar"})," config you set will be used (likely on the final tab of your tab navigator, not what the user is seeing)."]}),"\n",(0,r.jsx)(n.p,{children:"To fix this we'll have to do two things"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Only use the ",(0,r.jsx)(n.code,{children:"StatusBar"})," component on our initial screen. This allows us to ensure the correct ",(0,r.jsx)(n.code,{children:"StatusBar"})," config is used."]}),"\n",(0,r.jsxs)(n.li,{children:["Leverage the events system in React Navigation and ",(0,r.jsx)(n.code,{children:"StatusBar"}),"'s implicit API to change the ",(0,r.jsx)(n.code,{children:"StatusBar"})," configuration when a tab becomes active."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["First, the new ",(0,r.jsx)(n.code,{children:"Screen2.js"})," will no longer use the ",(0,r.jsx)(n.code,{children:"StatusBar"})," component."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class Screen2 extends React.Component {\n  render() {\n    return (\n      <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>\n        <Text style={styles.paragraph}>Dark Screen</Text>\n        <Button\n          title=\"Next screen\"\n          onPress={() => this.props.navigation.navigate('Screen1')}\n        />\n        {/* <Button\n          title=\"Toggle Drawer\"\n          onPress={() => this.props.navigation.navigate('DrawerToggle')}\n        /> */}\n      </SafeAreaView>\n    );\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then, in both ",(0,r.jsx)(n.code,{children:"Screen1.js"})," and ",(0,r.jsx)(n.code,{children:"Screen2.js"})," we'll set up a listener to change the ",(0,r.jsx)(n.code,{children:"StatusBar"})," configuration when that tab ",(0,r.jsx)(n.code,{children:"didFocus"}),". We'll also make sure to remove the listener when the ",(0,r.jsx)(n.code,{children:"TabNavigator"})," has been unmounted."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class Screen1 extends React.Component {\n  componentDidMount() {\n    this._navListener = this.props.navigation.addListener('didFocus', () => {\n      StatusBar.setBarStyle('light-content');\n      isAndroid && StatusBar.setBackgroundColor('#6a51ae');\n    });\n  }\n\n  componentWillUnmount() {\n    this._navListener.remove();\n  }\n\n  ...\n}\n\nclass Screen2 extends React.Component {\n  componentDidMount() {\n    this._navListener = this.props.navigation.addListener('didFocus', () => {\n      StatusBar.setBarStyle('dark-content');\n      isAndroid && StatusBar.setBackgroundColor('#ecf0f1');\n    });\n  }\n\n  componentWillUnmount() {\n    this._navListener.remove();\n  }\n\n  ...\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"TabNavigator with different StatusBar configs",src:t(40321).Z+"",width:"879",height:"862"})}),"\n",(0,r.jsxs)(n.p,{children:["The code used for these demos is available as a ",(0,r.jsx)(n.a,{href:"https://snack.expo.io/r1iuFP6Ez",children:"Snack"}),"."]})]})}function u(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},22391:function(e,n,t){t.d(n,{Z:function(){return a}});let a=t.p+"assets/images/statusbar-drawer-demo-3f6ce5c56a2086d8aba8ab2f1f3f513e.gif"},26135:function(e,n,t){t.d(n,{Z:function(){return a}});let a=t.p+"assets/images/statusbar-stack-demo-695c18cfc1489cd5c4c18827bc66befb.gif"},40321:function(e,n,t){t.d(n,{Z:function(){return a}});let a=t.p+"assets/images/statusbar-tab-demo-c5f932fea901d54665ed07f921ad8322.gif"},50065:function(e,n,t){t.d(n,{Z:function(){return i},a:function(){return o}});var a=t(67294);let r={},s=a.createContext(r);function o(e){let n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);