"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["63469"],{95426:function(e,n,s){s.r(n),s.d(n,{metadata:()=>t,contentTitle:()=>a,default:()=>h,assets:()=>c,toc:()=>d,frontMatter:()=>r});var t=JSON.parse('{"id":"use-link-props","title":"useLinkProps","description":"The useLinkProps hook lets us build our custom link component. The link component can be used as a button to navigate to a screen. On the web, it will be rendered as an anchor tag (`) with the href attribute so that all the accessibility features of a link are preserved, e.g. - such as Right click -> Open link in new tab\\", Ctrl+Click/\u2318+Click` etc.","source":"@site/versioned_docs/version-7.x/use-link-props.md","sourceDirName":".","slug":"/use-link-props","permalink":"/docs/use-link-props","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-7.x/use-link-props.md","tags":[],"version":"7.x","frontMatter":{"id":"use-link-props","title":"useLinkProps","sidebar_label":"useLinkProps"},"sidebar":"docs","previous":{"title":"useLinkTo","permalink":"/docs/use-link-to"},"next":{"title":"useLinkBuilder","permalink":"/docs/use-link-builder"}}'),i=s("85893"),o=s("50065");let r={id:"use-link-props",title:"useLinkProps",sidebar_label:"useLinkProps"},a=void 0,c={},d=[{value:"Options",id:"options",level:2},{value:"<code>screen</code> and <code>params</code>",id:"screen-and-params",level:3},{value:"<code>action</code>",id:"action",level:3},{value:"<code>href</code>",id:"href",level:3}];function l(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"useLinkProps"})," hook lets us build our custom link component. The link component can be used as a button to navigate to a screen. On the web, it will be rendered as an anchor tag (",(0,i.jsx)(n.code,{children:"<a>"}),") with the ",(0,i.jsx)(n.code,{children:"href"})," attribute so that all the accessibility features of a link are preserved, e.g. - such as ",(0,i.jsx)(n.code,{children:'Right click -> Open link in new tab"'}),", ",(0,i.jsx)(n.code,{children:"Ctrl+Click"}),"/",(0,i.jsx)(n.code,{children:"\u2318+Click"})," etc."]}),"\n",(0,i.jsx)(n.p,{children:"It returns an object with some props that you can pass to a component."}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { useLinkProps } from '@react-navigation/native';\n\n// ...\n\nconst LinkButton = ({ screen, params, action, href, children, ...rest }) => {\n  const props = useLinkProps({ screen, params, action, href });\n\n  const [isHovered, setIsHovered] = React.useState(false);\n\n  return (\n    <Pressable {...props} {...rest}>\n      <Text>{children}</Text>\n    </Pressable>\n  );\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then you can use the ",(0,i.jsx)(n.code,{children:"LinkButton"})," component elsewhere in your app:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function Home() {\n  return (\n    <LinkButton screen=\"Profile\" params={{ id: 'jane' }}>\n      Go to Jane's profile\n    </LinkButton>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,i.jsxs)(n.h3,{id:"screen-and-params",children:[(0,i.jsx)(n.code,{children:"screen"})," and ",(0,i.jsx)(n.code,{children:"params"})]}),"\n",(0,i.jsxs)(n.p,{children:["You can pass ",(0,i.jsx)(n.code,{children:"screen"})," and ",(0,i.jsx)(n.code,{children:"params"})," to navigate to a screen on press:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function Home() {\n  return (\n    <LinkButton screen=\"Profile\" params={{ id: 'jane' }}>\n      Go to Jane's profile\n    </LinkButton>\n  );\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you want to navigate to a nested screen, you can pass the name of the ",(0,i.jsx)(n.code,{children:"screen"})," in ",(0,i.jsx)(n.code,{children:"params"})," similar to ",(0,i.jsx)(n.a,{href:"/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator",children:"navigating to a screen in a nested navigator"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"<LinkButton screen=\"Root\" params={{ screen: 'Post', params: { id: 123 } }}>\n  Go to post 123\n</LinkButton>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"action",children:(0,i.jsx)(n.code,{children:"action"})}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes we want a different behavior for in-page navigation, such as ",(0,i.jsx)(n.code,{children:"replace"})," instead of ",(0,i.jsx)(n.code,{children:"navigate"}),". We can use the ",(0,i.jsx)(n.code,{children:"action"})," prop to customize it:"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { StackActions } from '@react-navigation/native';\n\n// ...\n\nfunction Home() {\n  return (\n    <LinkButton\n      screen=\"Profile\"\n      params={{ id: 'jane' }}\n      action={StackActions.replace('Profile', { id: 'jane' })}\n    >\n      Go to Jane's profile\n    </LinkButton>\n  );\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"screen"})," and ",(0,i.jsx)(n.code,{children:"params"})," props can be omitted if the ",(0,i.jsx)(n.code,{children:"action"})," prop is specified. In that case, we recommend specifying the ",(0,i.jsx)(n.code,{children:"href"})," prop as well to ensure that the link is accessible."]}),"\n",(0,i.jsx)(n.h3,{id:"href",children:(0,i.jsx)(n.code,{children:"href"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"href"})," is used for the ",(0,i.jsx)(n.code,{children:"href"})," attribute of the anchor tag on the Web to make the links accessible. By default, this is automatically determined based on the ",(0,i.jsxs)(n.a,{href:"/docs/navigation-container#linking",children:[(0,i.jsx)(n.code,{children:"linking"})," options"]})," using the ",(0,i.jsx)(n.code,{children:"screen"})," and ",(0,i.jsx)(n.code,{children:"params"})," props."]}),"\n",(0,i.jsxs)(n.p,{children:["If you want to use a custom ",(0,i.jsx)(n.code,{children:"href"}),", you can pass it as the ",(0,i.jsx)(n.code,{children:"href"})," prop:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function Home() {\n  return (\n    <LinkButton\n      action={StackActions.replace('Profile', { id: 'jane' })}\n      href=\"/users/jane\"\n    >\n      Getting Started\n    </LinkButton>\n  );\n}\n"})})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},50065:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return r}});var t=s(67294);let i={},o=t.createContext(i);function r(e){let n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);