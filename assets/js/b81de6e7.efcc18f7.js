"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["91311"],{86950:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>c,default:()=>h,assets:()=>r,toc:()=>l,frontMatter:()=>a});var i=JSON.parse('{"id":"stack-actions","title":"StackActions reference","description":"StackActions is an object containing methods for generating actions specific to stack-based navigators. Its methods expand upon the actions available in NavigationActions.","source":"@site/versioned_docs/version-2.x/stack-actions.md","sourceDirName":".","slug":"/stack-actions","permalink":"/docs/2.x/stack-actions","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-2.x/stack-actions.md","tags":[],"version":"2.x","frontMatter":{"id":"stack-actions","title":"StackActions reference","sidebar_label":"StackActions"},"sidebar":"version-2.x-api","previous":{"title":"NavigationActions","permalink":"/docs/2.x/navigation-actions"},"next":{"title":"DrawerActions","permalink":"/docs/2.x/drawer-actions"}}'),s=t("85893"),o=t("50065");let a={id:"stack-actions",title:"StackActions reference",sidebar_label:"StackActions"},c=void 0,r={},l=[{value:"reset",id:"reset",level:3},{value:"How to use the <code>index</code> parameter",id:"how-to-use-the-index-parameter",level:4},{value:"replace",id:"replace",level:3},{value:"push",id:"push",level:3},{value:"pop",id:"pop",level:3},{value:"popToTop",id:"poptotop",level:3}];function d(e){let n={a:"a",code:"code",em:"em",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"StackActions"})," is an object containing methods for generating actions specific to stack-based navigators. Its methods expand upon the actions available in ",(0,s.jsx)(n.a,{href:"/docs/2.x/navigation-actions",children:(0,s.jsx)(n.code,{children:"NavigationActions"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The following actions are supported:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#reset",children:"Reset"})," - Replace current state with a new state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#replace",children:"Replace"})," - Replace a route at a given key with another route"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#push",children:"Push"})," - Add a route on the top of the stack, and navigate forward to it"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#pop",children:"Pop"})," - Navigate back to previous routes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#poptotop",children:"PopToTop"})," - Navigate to the top route of the stack, dismissing all other routes"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"reset",children:"reset"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"reset"})," action wipes the whole navigation state and replaces it with the result of several actions."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index"})," - ",(0,s.jsx)(n.em,{children:"number"})," - required - Index of the active route on ",(0,s.jsx)(n.code,{children:"routes"})," array in navigation ",(0,s.jsx)(n.code,{children:"state"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"actions"})," - ",(0,s.jsx)(n.em,{children:"array"})," - required - Array of Navigation Actions that will replace the navigation state."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"key"})," - ",(0,s.jsx)(n.em,{children:"string or null"})," - optional - If set, the navigator with the given key will reset. If null, the root navigator will reset."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { StackActions, NavigationActions } from 'react-navigation';\n\nconst resetAction = StackActions.reset({\n  index: 0,\n  actions: [NavigationActions.navigate({ routeName: 'Profile' })],\n});\nthis.props.navigation.dispatch(resetAction);\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"how-to-use-the-index-parameter",children:["How to use the ",(0,s.jsx)(n.code,{children:"index"})," parameter"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"index"})," param is used to specify the current active route."]}),"\n",(0,s.jsxs)(n.p,{children:["eg: given a basic stack navigation with two routes ",(0,s.jsx)(n.code,{children:"Profile"})," and ",(0,s.jsx)(n.code,{children:"Settings"}),".\nTo reset the state to a point where the active screen was ",(0,s.jsx)(n.code,{children:"Settings"})," but have it stacked on top of a ",(0,s.jsx)(n.code,{children:"Profile"})," screen, you would do the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { StackActions, NavigationActions } from 'react-navigation';\n\nconst resetAction = StackActions.reset({\n  index: 1,\n  actions: [\n    NavigationActions.navigate({ routeName: 'Profile' }),\n    NavigationActions.navigate({ routeName: 'Settings' }),\n  ],\n});\nthis.props.navigation.dispatch(resetAction);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"replace",children:"replace"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"replace"})," action replaces the route at the given key with another route."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"key"})," - ",(0,s.jsx)(n.em,{children:"string"})," - Key of the route to replace. If this is not defined, the most recent route will be replaced."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"newKey"})," - ",(0,s.jsx)(n.em,{children:"string"})," - Key to use for the replacement route. Generated automatically if not provided."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"routeName"})," - ",(0,s.jsx)(n.em,{children:"string"})," - ",(0,s.jsx)(n.code,{children:"routeName"})," to use for replacement route."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"params"})," - ",(0,s.jsx)(n.em,{children:"object"})," - Parameters to pass in to the replacement route."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"action"})," - ",(0,s.jsx)(n.em,{children:"object"})," - Optional sub-action."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"immediate"}),"*- ",(0,s.jsx)(n.em,{children:"boolean"})," -*Currently has no effect, this is a placeholder for when stack navigator supports animated replace (it currently does not)."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"push",children:"push"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"push"})," action adds a route on top of the stack and navigates forward to it. This differs from ",(0,s.jsx)(n.code,{children:"navigate"})," in that ",(0,s.jsx)(n.code,{children:"navigate"})," will pop back to earlier in the stack if a route of the given name is already present there. ",(0,s.jsx)(n.code,{children:"push"})," will always add on top, so a route can be present multiple times."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"routeName"})," - ",(0,s.jsx)(n.em,{children:"string"})," - ",(0,s.jsx)(n.code,{children:"routeName"})," to push onto the stack."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"params"})," - ",(0,s.jsx)(n.em,{children:"object"})," - Screen params to merge into the destination route (found in the pushed screen through ",(0,s.jsx)(n.code,{children:"this.props.navigation.state.params"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"action"})," - (advanced) The sub-action to run in the child router, if the screen is a navigator."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { StackActions } from 'react-navigation';\n\nconst pushAction = StackActions.push({\n  routeName: 'Profile',\n  params: {\n    myUserId: 9,\n  },\n});\n\nthis.props.navigation.dispatch(pushAction);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"pop",children:"pop"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"pop"})," action takes you back to a previous screen in the stack. The ",(0,s.jsx)(n.code,{children:"n"})," param allows you to specify how many screens to pop back by."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"n"})," - ",(0,s.jsx)(n.em,{children:"number"})," - The number of screens to pop back by."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { StackActions } from 'react-navigation';\n\nconst popAction = StackActions.pop({\n  n: 1,\n});\n\nthis.props.navigation.dispatch(popAction);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"poptotop",children:"popToTop"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"popToTop"})," action takes you back to the first screen in the stack, dismissing all the others. It's functionally identical to ",(0,s.jsx)(n.code,{children:"StackActions.pop({n: currentIndex})"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { StackActions } from 'react-navigation';\n\nthis.props.navigation.dispatch(StackActions.popToTop());\n"})})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return c},a:function(){return a}});var i=t(67294);let s={},o=i.createContext(s);function a(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);