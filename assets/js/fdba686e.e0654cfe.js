"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["86415"],{4753:function(e,n,r){r.r(n),r.d(n,{metadata:()=>o,contentTitle:()=>i,default:()=>l,assets:()=>c,toc:()=>p,frontMatter:()=>a});var o=JSON.parse('{"id":"group","title":"Group","description":"Group components are used to group several screens inside a navigator for organizational purposes. They can also be used to apply the same options such as header styles to a group of screens.","source":"@site/versioned_docs/version-6.x/group.md","sourceDirName":".","slug":"/group","permalink":"/docs/6.x/group","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-6.x/group.md","tags":[],"version":"6.x","frontMatter":{"id":"group","title":"Group","sidebar_label":"Group"},"sidebar":"docs","previous":{"title":"ServerContainer","permalink":"/docs/6.x/server-container"},"next":{"title":"Screen","permalink":"/docs/6.x/screen"}}'),s=r("85893"),t=r("50065");let a={id:"group",title:"Group",sidebar_label:"Group"},i=void 0,c={},p=[{value:"Props",id:"props",level:2},{value:"<code>screenOptions</code>",id:"screenoptions",level:3},{value:"<code>navigationKey</code>",id:"navigationkey",level:3}];function d(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Group"})," components are used to group several ",(0,s.jsx)(n.a,{href:"/docs/6.x/screen",children:"screens"})," inside a navigator for organizational purposes. They can also be used to apply the same options such as header styles to a group of screens."]}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.code,{children:"Group"})," is returned from a ",(0,s.jsx)(n.code,{children:"createXNavigator"})," function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const Stack = createStackNavigator(); // Stack contains Screen & Navigator properties\n"})}),"\n",(0,s.jsxs)(n.p,{children:["After creating the navigator, it can be used as children of the ",(0,s.jsx)(n.code,{children:"Navigator"})," component:"]}),"\n",(0,s.jsx)("samp",{id:"api-group"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'<Stack.Navigator>\n  <Stack.Group\n    screenOptions={{ headerStyle: { backgroundColor: \'papayawhip\' } }}\n  >\n    <Stack.Screen name="Home" component={HomeScreen} />\n    <Stack.Screen name="Profile" component={ProfileScreen} />\n  </Stack.Group>\n  <Stack.Group screenOptions={{ presentation: \'modal\' }}>\n    <Stack.Screen name="Search" component={SearchScreen} />\n    <Stack.Screen name="Share" component={ShareScreen} />\n  </Stack.Group>\n</Stack.Navigator>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["It's also possible to nest ",(0,s.jsx)(n.code,{children:"Group"})," components inside other ",(0,s.jsx)(n.code,{children:"Group"})," components."]}),"\n",(0,s.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,s.jsx)(n.h3,{id:"screenoptions",children:(0,s.jsx)(n.code,{children:"screenOptions"})}),"\n",(0,s.jsx)(n.p,{children:"Options to configure how the screens inside the group get presented in the navigator. It accepts either an object or a function returning an object:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"<Stack.Group\n  screenOptions={{\n    presentation: 'modal',\n  }}\n>\n  {/* screens */}\n</Stack.Group>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When you pass a function, it'll receive the ",(0,s.jsx)(n.a,{href:"/docs/6.x/route-prop",children:(0,s.jsx)(n.code,{children:"route"})})," and ",(0,s.jsx)(n.a,{href:"/docs/6.x/navigation-prop",children:(0,s.jsx)(n.code,{children:"navigation"})}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"<Stack.Group\n  screenOptions={({ route, navigation }) => ({\n    title: route.params.title,\n  })}\n>\n  {/* screens */}\n</Stack.Group>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["These options are merged with the ",(0,s.jsx)(n.code,{children:"options"})," specified in the individual screens, and the screen's options will take precedence over the group's options."]}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"/docs/6.x/screen-options",children:"Options for screens"})," for more details and examples."]}),"\n",(0,s.jsx)(n.h3,{id:"navigationkey",children:(0,s.jsx)(n.code,{children:"navigationKey"})}),"\n",(0,s.jsx)(n.p,{children:"Optional key for a group of screens screen. If the key changes, all existing screens in this group will be removed (if used in a stack navigator) or reset (if used in a tab or drawer navigator):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"<Stack.Group navigationKey={isSignedIn ? 'user' : 'guest'}>\n  {/* screens */}\n</Stack.Group>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is similar to the ",(0,s.jsx)(n.a,{href:"/docs/6.x/screen#navigationkey",children:(0,s.jsx)(n.code,{children:"navigationKey"})})," prop on ",(0,s.jsx)(n.code,{children:"Screen"}),", but applies to a group of screens."]})]})}function l(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},50065:function(e,n,r){r.d(n,{Z:function(){return i},a:function(){return a}});var o=r(67294);let s={},t=o.createContext(s);function a(e){let n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);