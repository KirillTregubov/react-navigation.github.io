"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["35774"],{13197:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>a,default:()=>d,assets:()=>u,toc:()=>l,frontMatter:()=>o});var i=JSON.parse('{"id":"use-link-builder","title":"useLinkBuilder","description":"The useLinkBuilder hook lets us build a path to use for links for a screen in the current navigator\'s state. It returns a function that takes name and params for the screen to focus and returns path based on the linking options.","source":"@site/versioned_docs/version-5.x/use-link-builder.md","sourceDirName":".","slug":"/use-link-builder","permalink":"/docs/5.x/use-link-builder","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-5.x/use-link-builder.md","tags":[],"version":"5.x","frontMatter":{"id":"use-link-builder","title":"useLinkBuilder","sidebar_label":"useLinkBuilder"},"sidebar":"docs","previous":{"title":"useLinkProps","permalink":"/docs/5.x/use-link-props"},"next":{"title":"useLinking","permalink":"/docs/5.x/use-linking"}}'),r=t("85893"),s=t("50065");let o={id:"use-link-builder",title:"useLinkBuilder",sidebar_label:"useLinkBuilder"},a=void 0,u={},l=[];function c(e){let n={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"useLinkBuilder"})," hook lets us build a path to use for links for a screen in the current navigator's state. It returns a function that takes ",(0,r.jsx)(n.code,{children:"name"})," and ",(0,r.jsx)(n.code,{children:"params"})," for the screen to focus and returns path based on the ",(0,r.jsxs)(n.a,{href:"/docs/5.x/navigation-container#linking",children:[(0,r.jsx)(n.code,{children:"linking"})," options"]}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { Link, CommonActions, useLinkBuilder } from '@react-navigation/native';\n\n// ...\n\nfunction DrawerContent({ state, descriptors }) {\n  const buildLink = useLinkBuilder();\n\n  return state.routes((route) => (\n    <Link\n      to={buildLink(route.name, route.params)}\n      action={CommonActions.navigate(route.name)}\n    >\n      {descriptors[route.key].options.title}\n    </Link>\n  ));\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"This hook is intended to be used in navigators to show links to various pages in it, such as drawer and tab navigators. If you're building a custom navigator, custom drawer content, custom tab bar etc. then you might want to use this hook."}),"\n",(0,r.jsx)(n.p,{children:"There are couple of important things to note:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The destination screen must be present in the current navigator. It cannot be in a parent navigator or a navigator nested in a child."}),"\n",(0,r.jsx)(n.li,{children:"It's intended to be only used in custom navigators to keep them reusable in multiple apps. For your regular app code, use paths directly instead of building paths for screens."}),"\n"]})]})}function d(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return o}});var i=t(67294);let r={},s=i.createContext(r);function o(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);