"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["22749"],{26524:function(e,t,n){n.r(t),n.d(t,{metadata:()=>i,contentTitle:()=>l,default:()=>h,assets:()=>s,toc:()=>c,frontMatter:()=>r});var i=JSON.parse('{"id":"tab-navigator","title":"createTabNavigator","description":"Note: createTabNavigator is deprecated. Please use createBottomTabNavigator and/or createMaterialTopTabNavigator instead.","source":"@site/versioned_docs/version-2.x/tab-navigator.md","sourceDirName":".","slug":"/tab-navigator","permalink":"/docs/2.x/tab-navigator","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-2.x/tab-navigator.md","tags":[],"version":"2.x","frontMatter":{"id":"tab-navigator","title":"createTabNavigator","sidebar_label":"createTabNavigator"},"sidebar":"version-2.x-api","previous":{"title":"createDrawerNavigator","permalink":"/docs/2.x/drawer-navigator"},"next":{"title":"createBottomTabNavigator","permalink":"/docs/2.x/bottom-tab-navigator"}}'),a=n("85893"),o=n("50065");let r={id:"tab-navigator",title:"createTabNavigator",sidebar_label:"createTabNavigator"},l=void 0,s={},c=[{value:"RouteConfigs",id:"routeconfigs",level:2},{value:"TabNavigatorConfig",id:"tabnavigatorconfig",level:2},{value:"<code>tabBarOptions</code> for <code>TabBarBottom</code> (default tab bar on iOS)",id:"tabbaroptions-for-tabbarbottom-default-tab-bar-on-ios",level:3},{value:"<code>tabBarOptions</code> for <code>TabBarTop</code> (default tab bar on Android)",id:"tabbaroptions-for-tabbartop-default-tab-bar-on-android",level:3},{value:"<code>navigationOptions</code> for screens inside of the navigator",id:"navigationoptions-for-screens-inside-of-the-navigator",level:2},{value:"<code>title</code>",id:"title",level:4},{value:"<code>tabBarVisible</code>",id:"tabbarvisible",level:4},{value:"<code>swipeEnabled</code>",id:"swipeenabled",level:4},{value:"<code>tabBarIcon</code>",id:"tabbaricon",level:4},{value:"<code>tabBarLabel</code>",id:"tabbarlabel",level:4},{value:"<code>tabBarOnPress</code>",id:"tabbaronpress",level:4}];function d(e){let t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["Note: ",(0,a.jsx)(t.code,{children:"createTabNavigator"})," is deprecated. Please use ",(0,a.jsx)(t.code,{children:"createBottomTabNavigator"})," and/or ",(0,a.jsx)(t.code,{children:"createMaterialTopTabNavigator"})," instead."]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"createTabNavigator(RouteConfigs, TabNavigatorConfig);\n"})}),"\n",(0,a.jsx)(t.h2,{id:"routeconfigs",children:"RouteConfigs"}),"\n",(0,a.jsxs)(t.p,{children:["The route configs object is a mapping from route name to a route config, which tells the navigator what to present for that route, see ",(0,a.jsx)(t.a,{href:"/docs/2.x/stack-navigator#routeconfigs",children:"example"})," from stack navigator."]}),"\n",(0,a.jsx)(t.h2,{id:"tabnavigatorconfig",children:"TabNavigatorConfig"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"tabBarComponent"})," - Component to use as the tab bar, e.g. ",(0,a.jsx)(t.code,{children:"TabBarBottom"})," (this is the default on iOS), ",(0,a.jsx)(t.code,{children:"TabBarTop"})," (this is the default on Android)."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"tabBarPosition"})," - Position of the tab bar, can be ",(0,a.jsx)(t.code,{children:"'top'"})," or ",(0,a.jsx)(t.code,{children:"'bottom'"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"swipeEnabled"})," - Whether to allow swiping between tabs."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"animationEnabled"})," - Whether to animate when changing tabs."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"lazy"})," - Defaults to ",(0,a.jsx)(t.code,{children:"true"}),". If ",(0,a.jsx)(t.code,{children:"false"}),", all tabs are rendered immediately. When ",(0,a.jsx)(t.code,{children:"true"}),", tabs are rendered only when they are made active."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"removeClippedSubviews"})," - Defaults to ",(0,a.jsx)(t.code,{children:"true"}),". An optimization to reduce memory usage by freeing resources used by inactive tabs."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"initialLayout"})," - Optional object containing the initial ",(0,a.jsx)(t.code,{children:"height"})," and ",(0,a.jsx)(t.code,{children:"width"}),", can be passed to prevent the one frame delay in ",(0,a.jsx)(t.a,{href:"https://github.com/react-navigation/react-navigation/tree/main/packages/react-native-tab-view#avoid-one-frame-delay",children:"react-native-tab-view"})," rendering."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"tabBarOptions"})," - Configure the tab bar, see below."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Several options get passed to the underlying router to modify navigation logic:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"initialRouteName"})," - The routeName for the initial tab route when first loading."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"order"})," - Array of routeNames which defines the order of the tabs."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"paths"})," - Provide a mapping of routeName to path config, which overrides the paths set in the routeConfigs."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"backBehavior"})," - Should the back button cause a tab switch to the initial tab? If yes, set to ",(0,a.jsx)(t.code,{children:"initialRoute"}),", otherwise ",(0,a.jsx)(t.code,{children:"none"}),". Defaults to ",(0,a.jsx)(t.code,{children:"initialRoute"})," behavior."]}),"\n"]}),"\n",(0,a.jsxs)(t.h3,{id:"tabbaroptions-for-tabbarbottom-default-tab-bar-on-ios",children:[(0,a.jsx)(t.code,{children:"tabBarOptions"})," for ",(0,a.jsx)(t.code,{children:"TabBarBottom"})," (default tab bar on iOS)"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"activeTintColor"})," - Label and icon color of the active tab."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"activeBackgroundColor"})," - Background color of the active tab."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"inactiveTintColor"})," - Label and icon color of the inactive tab."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"inactiveBackgroundColor"})," - Background color of the inactive tab."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"showLabel"})," - Whether to show label for tab, default is true."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"style"})," - Style object for the tab bar."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"labelStyle"})," - Style object for the tab label."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"tabStyle"})," - Style object for the tab."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"allowFontScaling"})," - Whether label font should scale to respect Text Size accessibility settings, default is true."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"safeAreaInset"})," - Override the ",(0,a.jsx)(t.code,{children:"forceInset"})," prop for ",(0,a.jsx)(t.code,{children:"<SafeAreaView>"}),". Defaults to ",(0,a.jsx)(t.code,{children:"{ bottom: 'always', top: 'never' }"}),". Available keys are ",(0,a.jsx)(t.code,{children:"top | bottom | left | right"})," provided with the values ",(0,a.jsx)(t.code,{children:"'always' | 'never'"}),"."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"tabBarOptions: {\n  activeTintColor: '#e91e63',\n  labelStyle: {\n    fontSize: 12,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n"})}),"\n",(0,a.jsxs)(t.h3,{id:"tabbaroptions-for-tabbartop-default-tab-bar-on-android",children:[(0,a.jsx)(t.code,{children:"tabBarOptions"})," for ",(0,a.jsx)(t.code,{children:"TabBarTop"})," (default tab bar on Android)"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"activeTintColor"})," - Label and icon color of the active tab."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"inactiveTintColor"})," - Label and icon color of the inactive tab."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"showIcon"})," - Whether to show icon for tab, default is false."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"showLabel"})," - Whether to show label for tab, default is true."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"upperCaseLabel"})," - Whether to make label uppercase, default is true."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"pressColor"})," - Color for material ripple (Android >= 5.0 only)."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"pressOpacity"})," - Opacity for pressed tab (iOS and Android < 5.0 only)."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"scrollEnabled"})," - Whether to enable scrollable tabs."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"tabStyle"})," - Style object for the tab."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"indicatorStyle"})," - Style object for the tab indicator (line at the bottom of the tab)."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"labelStyle"})," - Style object for the tab label."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"iconStyle"})," - Style object for the tab icon."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"style"})," - Style object for the tab bar."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"allowFontScaling"})," - Whether label font should scale to respect Text Size accessibility settings, default is true."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"tabBarOptions: {\n  labelStyle: {\n    fontSize: 12,\n  },\n  tabStyle: {\n    width: 100,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"navigationoptions-for-screens-inside-of-the-navigator",children:[(0,a.jsx)(t.code,{children:"navigationOptions"})," for screens inside of the navigator"]}),"\n",(0,a.jsx)(t.h4,{id:"title",children:(0,a.jsx)(t.code,{children:"title"})}),"\n",(0,a.jsxs)(t.p,{children:["Generic title that can be used as a fallback for ",(0,a.jsx)(t.code,{children:"headerTitle"})," and ",(0,a.jsx)(t.code,{children:"tabBarLabel"}),"."]}),"\n",(0,a.jsx)(t.h4,{id:"tabbarvisible",children:(0,a.jsx)(t.code,{children:"tabBarVisible"})}),"\n",(0,a.jsx)(t.p,{children:"True or false to show or hide the tab bar, if not set then defaults to true."}),"\n",(0,a.jsx)(t.h4,{id:"swipeenabled",children:(0,a.jsx)(t.code,{children:"swipeEnabled"})}),"\n",(0,a.jsx)(t.p,{children:"True or false to enable or disable swiping between tabs, if not set then defaults to TabNavigatorConfig option swipeEnabled."}),"\n",(0,a.jsx)(t.h4,{id:"tabbaricon",children:(0,a.jsx)(t.code,{children:"tabBarIcon"})}),"\n",(0,a.jsxs)(t.p,{children:["React Element or a function that given ",(0,a.jsx)(t.code,{children:"{ focused: boolean, horizontal: boolean, tintColor: string }"})," returns a React.Node, to display in the tab bar. ",(0,a.jsx)(t.code,{children:"horizontal"})," is ",(0,a.jsx)(t.code,{children:"true"})," when the device is in landscape and ",(0,a.jsx)(t.code,{children:"false"})," when portrait. The icon is re-rendered whenever the device orientation changes."]}),"\n",(0,a.jsx)(t.h4,{id:"tabbarlabel",children:(0,a.jsx)(t.code,{children:"tabBarLabel"})}),"\n",(0,a.jsxs)(t.p,{children:["Title string of a tab displayed in the tab bar or React Element or a function that given ",(0,a.jsx)(t.code,{children:"{ focused: boolean, tintColor: string }"})," returns a React.Node, to display in tab bar. When undefined, scene ",(0,a.jsx)(t.code,{children:"title"})," is used. To hide, see ",(0,a.jsx)(t.code,{children:"tabBarOptions.showLabel"})," in the previous section."]}),"\n",(0,a.jsx)(t.h4,{id:"tabbaronpress",children:(0,a.jsx)(t.code,{children:"tabBarOnPress"})}),"\n",(0,a.jsx)(t.p,{children:"Callback to handle tap events; the argument is an object containing:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["the ",(0,a.jsx)(t.code,{children:"previousScene: { route, index }"})," which is the scene we are leaving"]}),"\n",(0,a.jsxs)(t.li,{children:["the ",(0,a.jsx)(t.code,{children:"scene: { route, index }"})," that was tapped"]}),"\n",(0,a.jsxs)(t.li,{children:["the ",(0,a.jsx)(t.code,{children:"jumpToIndex"})," method that can perform the navigation for you"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Useful for adding a custom logic before the transition to the next scene (the tapped one) starts."})]})}function h(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return l},a:function(){return r}});var i=n(67294);let a={},o=i.createContext(a);function r(e){let t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);