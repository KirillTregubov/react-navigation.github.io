"use strict";(self.webpackChunkreact_navigation_website_next=self.webpackChunkreact_navigation_website_next||[]).push([["38375"],{33326:function(e,n,i){i.r(n),i.d(n,{metadata:()=>t,contentTitle:()=>c,default:()=>l,assets:()=>s,toc:()=>d,frontMatter:()=>o});var t=JSON.parse('{"id":"typescript","title":"Type checking with TypeScript","description":"React Navigation exports type definitions for TypeScript projects, which can be used to type check screens, navigation options, and the navigation prop.","source":"@site/versioned_docs/version-4.x/typescript.md","sourceDirName":".","slug":"/typescript","permalink":"/docs/4.x/typescript","draft":false,"unlisted":false,"editUrl":"https://github.com/react-navigation/react-navigation.github.io/edit/main/versioned_docs/version-4.x/typescript.md","tags":[],"version":"4.x","frontMatter":{"id":"typescript","title":"Type checking with TypeScript","sidebar_label":"Type checking with TypeScript"},"sidebar":"version-4.x-docs","previous":{"title":"State persistence","permalink":"/docs/4.x/state-persistence"},"next":{"title":"Redux integration","permalink":"/docs/4.x/redux-integration"}}'),r=i("85893"),a=i("50065");let o={id:"typescript",title:"Type checking with TypeScript",sidebar_label:"Type checking with TypeScript"},c=void 0,s={},d=[{value:"Type checking <code>navigation</code> prop",id:"type-checking-navigation-prop",level:3},{value:"Type checking all props for a screen",id:"type-checking-all-props-for-a-screen",level:3},{value:"Type checking <code>navigationOptions</code>",id:"type-checking-navigationoptions",level:3},{value:"Type checking screen components",id:"type-checking-screen-components",level:3}];function p(e){let n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"React Navigation exports type definitions for TypeScript projects, which can be used to type check screens, navigation options, and the navigation prop."}),"\n",(0,r.jsxs)(n.h3,{id:"type-checking-navigation-prop",children:["Type checking ",(0,r.jsx)(n.code,{children:"navigation"})," prop"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"navigation"})," prop can be annotated to provide type checking for params and basic type checking for the available methods."]}),"\n",(0,r.jsxs)(n.p,{children:["The type depends on the navigator that renders the screen. For example, the ",(0,r.jsx)(n.code,{children:"navigation"})," prop provided by ",(0,r.jsx)(n.code,{children:"createStackNavigator"})," can be used like:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { NavigationStackProp } from 'react-navigation-stack';\n\ntype Props = {\n  navigation: NavigationStackProp<{ userId: string }>;\n};\n\nclass ProfileScreen extends React.Component<Props> {\n  // ...\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"The types take a generic for the params object."}),"\n",(0,r.jsxs)(n.p,{children:["Along with ",(0,r.jsx)(n.code,{children:"NavigationStackProp"}),", each navigator exports its own type for navigation prop:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationStackProp"})," for ",(0,r.jsx)(n.code,{children:"createStackNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-stack"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationTabProp"})," for ",(0,r.jsx)(n.code,{children:"createBottomTabNavigator"})," and ",(0,r.jsx)(n.code,{children:"createMaterialTopTabNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-tabs"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationDrawerProp"})," for ",(0,r.jsx)(n.code,{children:"createDrawerNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-drawer"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"type-checking-all-props-for-a-screen",children:"Type checking all props for a screen"}),"\n",(0,r.jsxs)(n.p,{children:["A screen receives the ",(0,r.jsx)(n.code,{children:"theme"})," and ",(0,r.jsx)(n.code,{children:"screenProps"})," props along with the ",(0,r.jsx)(n.code,{children:"navigation"})," prop. Instead of needing to annotate each property, they can be consolidated."]}),"\n",(0,r.jsxs)(n.p,{children:["The type depends on the navigator that renders the screen. For example, for a screen in ",(0,r.jsx)(n.code,{children:"createStackNavigator"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { NavigationStackScreenProps } from 'react-navigation-stack';\n\ntype Params = { userId: string };\n\ntype ScreenProps = { language: string };\n\nclass ProfileScreen extends React.Component<\n  NavigationStackScreenProps<Params, ScreenProps>\n> {\n  // ...\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Params"})," and ",(0,r.jsx)(n.code,{children:"ScreenProps"})," generics are optional, and can be omitted if you're not using them."]}),"\n",(0,r.jsxs)(n.p,{children:["Along with ",(0,r.jsx)(n.code,{children:"NavigationStackScreenProps"}),", each navigator exports its own type for navigation prop:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationStackScreenProps"})," for ",(0,r.jsx)(n.code,{children:"createStackNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-stack"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationTabScreenProps"})," for ",(0,r.jsx)(n.code,{children:"createBottomTabNavigator"})," and ",(0,r.jsx)(n.code,{children:"createMaterialTopTabNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-tabs"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationDrawerScreenProps"})," for ",(0,r.jsx)(n.code,{children:"createDrawerNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-drawer"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"type-checking-navigationoptions",children:["Type checking ",(0,r.jsx)(n.code,{children:"navigationOptions"})]}),"\n",(0,r.jsxs)(n.p,{children:["Different navigators accept different set of options for the screen. They are specified in the ",(0,r.jsx)(n.code,{children:"navigationOptions"})," static property which can be annotated to provide type-checking:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { NavigationStackOptions } from 'react-navigation-stack';\n\n// ...\n\nclass ProfileScreen extends React.Component<Props> {\n  static navigationOptions: NavigationStackOptions = {\n    headerTitle: 'Profile',\n  };\n\n  // ...\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Along with ",(0,r.jsx)(n.code,{children:"NavigationStackOptions"}),", each navigator exports its own type for navigation prop:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationStackOptions"})," for ",(0,r.jsx)(n.code,{children:"createStackNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-stack"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationBottomTabOptions"})," for ",(0,r.jsx)(n.code,{children:"createBottomTabNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-tabs"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationMaterialTabOptions"})," for ",(0,r.jsx)(n.code,{children:"createMaterialTopTabNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-tabs"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationDrawerOptions"})," for ",(0,r.jsx)(n.code,{children:"createDrawerNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-drawer"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"type-checking-screen-components",children:"Type checking screen components"}),"\n",(0,r.jsxs)(n.p,{children:["Screens can be annotated to provide type-checking for the props it receives, as well as ",(0,r.jsx)(n.code,{children:"navigationOptions"})," in a single type annotation."]}),"\n",(0,r.jsxs)(n.p,{children:["The type depends on the navigator that renders the screen. For example, for a screen in ",(0,r.jsx)(n.code,{children:"createStackNavigator"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { NavigationStackScreenComponent } from 'react-navigation-stack';\n\ntype Params = { userId: string };\n\ntype ScreenProps = { language: string };\n\nconst ProfileScreen: NavigationStackScreenComponent<Params, ScreenProps> = (\n  props\n) => {\n  // ...\n};\n\nProfileScreen.navigationOptions = {\n  headerTitle: 'Profile',\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Params"})," and ",(0,r.jsx)(n.code,{children:"ScreenProps"})," generics are optional, and can be omitted if you're not using them."]}),"\n",(0,r.jsxs)(n.p,{children:["Along with ",(0,r.jsx)(n.code,{children:"NavigationStackScreenComponent"}),", each navigator exports its own type for navigation prop:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationStackScreenComponent"})," for ",(0,r.jsx)(n.code,{children:"createStackNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-stack"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationBottomTabScreenComponent"})," for ",(0,r.jsx)(n.code,{children:"createBottomTabNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-tabs"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationMaterialTabScreenComponent"})," for ",(0,r.jsx)(n.code,{children:"createMaterialTopTabNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-tabs"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NavigationDrawerScreenComponent"})," for ",(0,r.jsx)(n.code,{children:"createDrawerNavigator"})," from ",(0,r.jsx)(n.code,{children:"react-navigation-drawer"})]}),"\n"]})]})}function l(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},50065:function(e,n,i){i.d(n,{Z:function(){return c},a:function(){return o}});var t=i(67294);let r={},a=t.createContext(r);function o(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);